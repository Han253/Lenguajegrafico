/*
 * generated by Xtext 2.11.0
 */
package org.uis.lenguajegrafico.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import org.uis.lenguajegrafico.lenguajegrafico.Chart
import org.uis.lenguajegrafico.lenguajegrafico.PieChart
import org.uis.lenguajegrafico.lenguajegrafico.BarChart
import org.uis.lenguajegrafico.lenguajegrafico.LineChart
import org.uis.lenguajegrafico.lenguajegrafico.MapChart
import org.uis.lenguajegrafico.lenguajegrafico.TableChart
import org.uis.lenguajegrafico.lenguajegrafico.Text
import org.uis.lenguajegrafico.lenguajegrafico.URL
import org.uis.lenguajegrafico.lenguajegrafico.DashBoard

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LenguajegraficoGenerator extends AbstractGenerator {
    	
	@Inject extension IQualifiedNameProvider
	
	String URLvalue = "var urlServerDefaul= 'http://192.168.100.13:8080/paises';";

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		 for(e : resource.allContents.toIterable.filter(URL)){
         	    URLvalue=URLvalue+"var "+e.name+" = '"+e.value+"';";
         }
         
         //Generate properties file, in this file you configure the URL for the Web Service
		 fsa.generateFile("/Web/js/properties.js",URLvalue);
		 
		
		 
         for(e : resource.allContents.toIterable.filter(PieChart)){
         	 fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         }
         
         for(e : resource.allContents.toIterable.filter(BarChart)){
         	 fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         }
         
         for(e : resource.allContents.toIterable.filter(LineChart)){
         	 fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)   
         }
         
         
         for(e : resource.allContents.toIterable.filter(MapChart)){
         	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
            fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
            fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)              
         }
         
         for(e : resource.allContents.toIterable.filter(TableChart)){
         	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
            fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
            fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)              
         }
         
         
          for(e : resource.allContents.toIterable.filter(DashBoard)){
         	 fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.compileHTML)
         }
         
	 }
	 
	
	 
	 /* this is the method to generate Html file in a "default_location/web" folder.
	  * e is the Pie Chart Object with contain information from Metamodel to generate file.
	  */
	 def generateHTML(PieChart e)'''
	    <html>
	       <head>
	           <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	           <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	           <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	           <script src="js/properties.js"></script>
	           <script src="js/«e.name».js"></script>
	           <style type="text/css">
	            /*CLASS*/
	            .grafico{
	           		background: white;
	           		width: 30%;
	           		height: 260px;
	           		min-width: 250px;
	           		margin: 10px;
	           		padding: 10px;
	           		display: inline-block;
	           	}
	           	
	           	.grafico .title{
	           		margin: 5px;
	           		font-family: Roboto, serif;
	           		text-align: center;
	               color: rgb(32, 33, 33);
	           	}
	           </style>
	       </head>
	       <body>
	         <div class="grafico">
	         	    <div class="title">«e.title.getTitle»</div>
	         		<div id="«e.name»"></div>
	         </div>
	       </body>
	    </html>
	'''
	
	
	 /* this is the method to generate JavaScript file in a default_location/web/js folder.
	  * e is the Pie Chart Object with contain information from Metamodel to generate file.
	  */
	def generateJS(PieChart e)'''
		google.charts.load('current', {'packages':['corechart']});
		google.charts.setOnLoadCallback(drawChart«e.name»);
					                  
		function drawChart«e.name»() {
				// Data table 
				var data = new google.visualization.DataTable();
				data.addColumn('string', '«e.tuple.label.name»');
				data.addColumn('number', '«e.tuple.value.name»');
					                          
				$.getJSON(«e.tuple.url.getURL», function(response){
					      for(var i in response){
					              data.addRows([[response[i]["«e.tuple.label.name»"],response[i]["«e.tuple.value.name»"]]]);
					      }
					                            	                                      
				var options = {chartArea:{width:'90%',height:'100%'},colors:['#378ED1','#3CAB65','#904C9F','#B7344C','#B734B2']};
					                          
				// Instantiate and draw our chart, passing in some options.
				var chart = new google.visualization.PieChart(document.getElementById('«e.name»'));
				chart.draw(data, options);       
				}); //END getJSON
		}          
	'''
	
	def generatePy(PieChart e)'''
	"""
	Pie Chart Code generated - this code es generated based on DSL.
	
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
	
	"""
	
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import json
	
	«e.tuple.label.name»=[]
	«e.tuple.value.name»=[]
	
	URL="«e.tuple.url.getURLforPython»"
	response=json.load(urlopen(URL))
	for i in response:
	    «e.tuple.label.name».append(i["«e.tuple.label.name»"])
	    «e.tuple.value.name».append(i["«e.tuple.value.name»"])
	
	fig, ax = plt.subplots()
	ax.pie(«e.tuple.value.name», labels=«e.tuple.label.name», autopct='%1.1f%%')
	ax.set_title(«e.title.getText»)
	ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
	plt.show()  
	
	'''
	
	def generateHTML(BarChart e)'''
	   <html>
	     <head>
	       <!--Load the AJAX API-->
	        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	        <script src="js/properties.js"></script>
	        <script src="js/«e.name».js"></script>
	        <style type="text/css">
	            /*CLASS*/
	        	.grafico{
	        		background: white;
	        		width: 30%;
	        		height: 260px;
	        		min-width: 250px;
	        		margin: 10px;
	        		padding: 10px;
	        		display: inline-block;
	        	}
	        	           	
	        	.grafico .title{
	        		margin: 5px;
	        		font-family: Roboto, serif;
	        		text-align: center;
	        		color: rgb(32, 33, 33);
	        	}
	       </style>
	   </head>	   
	   <body>
	       <div class="grafico">
	       	    <div class="title">«e.title.getTitle»</div>
	       	    <div id="«e.name»"></div>
	       </div>
	   </body>
	   </html>
	'''
	def generateJS(BarChart e)'''
			google.charts.load('current', {packages: ['corechart', 'bar']});
			google.charts.setOnLoadCallback(drawBasic);
				   
			function drawBasic() {
				   
				   var data = new google.visualization.DataTable();
				   data.addColumn('number', '«e.tuple.value1.name»');
				   data.addColumn('number', '«e.tuple.value2.name»');
				                               
				   $.getJSON(«e.tuple.url.getURL», function(response){
				             for(var i in response){
				                 data.addRows([[response[i]["«e.tuple.value1.name»"],response[i]["«e.tuple.value2.name»"]]]);
				             }
				                                                                         
				              var options = {legend: { position: "none" },chartArea:{width:'70%',height:'70%'},animation:{duration: 1000,easing: 'linear',startup: true}};
				                   
				              var chart = new google.visualization.ColumnChart(document.getElementById('«e.name»'));
				              chart.draw(data, options);       
				              }); //END getJSON
			}
	'''
	def generatePy(BarChart e)'''
	"""
	Column Chart Code generated - this code es generated based on DSL.
	
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
	"""
	
	«e.tuple.value1.name»=[]
	«e.tuple.value2.name»=[]
	
	URL="«e.tuple.url.getURLforPython»"
	response=json.load(urlopen(URL))
	for i in response:
		«e.tuple.value1.name».append(i["«e.tuple.value1.name»"])
		«e.tuple.value2.name».append(i["«e.tuple.value2.name»"])
	
	fig, ax = plt.subplots()
	ax.bar(«e.tuple.value1.name»,«e.tuple.value2.name»)
	ax.set_title(«e.title.getText»)
	plt.show()
	
	'''
		
	def generateHTML(LineChart e)'''
	 <html>
	   <head>
	     <!--Load the AJAX API-->
	      <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	      <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	      <script src="js/properties.js"></script>
	      <script src="js/«e.name».js"></script> 
	      <style type="text/css">
	            /*CLASS*/
	      		.grafico{
	      	    	background: white;
	      	        width: 30%;
	      	        height: 260px;
	      	        min-width: 250px;
	      	        margin: 10px;
	      	        padding: 10px;
	      	        display: inline-block;
	      	    }
	      	        	           	
	      	    .grafico .title{
	      	        margin: 5px;
	      	        font-family: Roboto, serif;
	      	        text-align: center;
	      	        color: rgb(32, 33, 33);
	      	    }
	      </style> 
	 </head>
	 <body>
	    <div class="grafico">
	    	<div class="title">«e.title.getTitle»</div>
	      	<div id="«e.name»"></div>
	    </div>
	 </html>
	'''	
	def generateJS(LineChart e)'''
		 google.charts.load('current', {'packages':['corechart']});
		 google.charts.setOnLoadCallback(drawChart);
		 
		 function drawChart() {
		         var data = new google.visualization.DataTable();
		         data.addColumn('number', '«e.tuple.value1.name»');
		         data.addColumn('number', '«e.tuple.value2.name»');
		            
		         $.getJSON(«e.tuple.url.getURL», function(response){
		            	  for(var i in response){
		            	      data.addRows([[response[i]["«e.tuple.value1.name»"],response[i]["«e.tuple.value2.name»"]]]);
		            	  }
		            	  
		            	  var options = {legend: { position: "none" },chartArea:{width:'70%',height:'70%'},colors:['#B7344C'],animation:{duration: 1000,easing: 'linear',startup: true}};
		            	  var chart = new google.visualization.LineChart(document.getElementById('«e.name»'));
		            	  chart.draw(data, options);       
		            	   }); //END getJSON
		 }  
	'''
	def generatePy(LineChart e)'''
	"""
	Line Chart Code generated - this code es generated based on DSL.
	
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
	"""
	
	«e.tuple.value1.name»=[]
	«e.tuple.value2.name»=[]
	
	URL="«e.tuple.url.getURLforPython»"
	response=json.load(urlopen(URL))
	for i in response:
		«e.tuple.value1.name».append(i["«e.tuple.value1.name»"])
		«e.tuple.value2.name».append(i["«e.tuple.value2.name»"])
	
	fig, ax = plt.subplots()
	ax.plot(«e.tuple.value1.name»,«e.tuple.value2.name»)
	ax.set_title(«e.title.getText»)
	plt.show()
	
	'''
	
	
	
	def generateHTML(MapChart e)'''
	<html>
	  <head>
	    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	   	<script src="js/properties.js"></script>
	   	<script src="js/«e.name».js"></script>
	   	<style type="text/css">
	   	    /*CLASS*/
	   		.grafico{
	   			background: white;
	   			text-aling:center;
	   			width: 62%;
	   			height: 400px;
	   			margin: 10px;
	   			padding: 10px;
	   			display: inline-block;
	   		}
	   		.grafico .title{
	   			margin: 5px;
	   			font-family: Roboto, serif;
	   			text-align: center;
	   			color: rgb(32, 33, 33);
	   		}
	   		/*IDS*/
	   		#«e.name»{
	   			width: 62%;
	   		    height: 240px;
	   		    position: absolute;
	   		}	   		
	   </style> 
	  </head>
	  <body>
	    <div class="grafico">
	    	    	<div class="title">«e.title.getTitle»</div>
	    	      	<div id="«e.name»"></div>
	    </div>
	  </body>
	</html>
	'''
	def generateJS(MapChart e)'''
	google.charts.load('current', {'packages': ['map'], 'callback': drawChart});
		      
	function drawChart() {
		      	
	var data = new google.visualization.DataTable();
	data.addColumn('number', '«e.tuple.value1.name»');
	data.addColumn('number', '«e.tuple.value2.name»');
	data.addColumn('string', '«e.tuple.value3.name»');
		      	
	$.getJSON(«e.tuple.url.getURL», function(response){
		      for(var i in response){
		      	  data.addRows([[response[i]["«e.tuple.value1.name»"],response[i]["«e.tuple.value2.name»"],response[i]["«e.tuple.value3.name»"]]]);
		      }
		      
		      var options = { 
		      zoomLevel: 13,
		      showTooltip: true,
		      showInfoWindow: true,
		      useMapTypeControl: true};
		      
		      var chart = new google.visualization.Map(document.getElementById('«e.name»'));
		      chart.draw(data, options);       
		      }); //END getJSON	      	
	}
	'''
	
	def generatePy(MapChart e)'''
	"""
	Map Chart Code generated - this code es generated based on DSL.
		
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
		
	"""
		
	from __future__ import print_function
	from __future__ import division
	from urllib.request import urlopen
	from PIL import Image
	import numpy as np
	import json
	import requests
		
	def get_static_google_map(zoom=14, imgsize="500x500", imgformat="jpeg",maptype="hybrid", markers=None ):
				    
		baseURL  =  "http://maps.google.com/maps/api/staticmap?"
		baseURL += "zoom=%i&" % zoom  # zoom 0 (all of the world scale ) to 22 (single buildings scale)
		baseURL += "size=%s&" % (imgsize) 
		baseURL += "format=%s&" % imgformat
		baseURL += "maptype=%s&" % maptype  # roadmap, satellite, hybrid, terrain
		if markers != None:
			baseURL += markers
		return baseURL
		
		
	def save_imagen(StrMakers):
		url = get_static_google_map(markers=StrMakers)
		r = sesion.get(url)
		f=open('%s.png' % FileName,'wb')
		f.write(r.content)
		f.close()
		
	FileName="«e.name»"
	URL="«e.tuple.url.getURLforPython»"
	respuesta=json.load(urlopen(URL))
		
	StrMakers = "markers=color:blue"
	for r in respuesta:
		StrMakers += "|%s" % str(r["«e.tuple.value1.name»"])+","+str(r["«e.tuple.value2.name»"])
		    
		
	sesion = requests.Session()
		
	save_imagen(StrMakers)
	imagen = Image.open('%s.png' % FileName)
	imagen
	'''
	def generateHTML(TableChart e)'''
	<html>
	<head>
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script src="js/properties.js"></script>
		<script src="js/«e.name».js"></script>
		<style type="text/css">
		
		/*This code block delete default style in google table chart*/
		table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {
		    color: black;
			background-image: initial;
			background-repeat: initial;
			background-position: initial;
			-webkit-border-radius: initial;
			-moz-border-radius: initial;
			border-radius: initial;
			border-style: initial;
			border-width: initial;
			border-color: initial;
			background-color: initial;
			text-align: center;
			padding: 5px;
		
		}
		
		/*CLASS*/
		.grafico{
			background: white;
			text-aling:center;
			width: 30%;
			height: 400px;
			margin: 10px;
			padding: 10px;
			display: inline-block;
		}
		.grafico .title{
			margin: 5px;
			font-size: 30px;
			font-family: Roboto, serif;
			text-align: center;
			color: rgb(32, 33, 33);
		}
		
		.headerTable{
			background-color: #1D7B9D;	
			color: white;
		}
		
		.rowTable{
			background-color: #C5DEE6;
		}
		
		.rowTable:hover{
		    background-color: #66AEC9;
		}
		
		/*IDS*/
		#«e.name»{
			position: absolute;
			z-index: auto;
			padding: 5px;
			height: 200px;
			width: 28%;
		}	   		
		</style> 
	</head>
	<body>
		<div class="grafico">
			<div class="title">«e.title.getTitle»</div>
			<div id="«e.name»"></div>
		</div>
	</body>
	</html>	
	'''
	
	def generateJS(TableChart e)'''
	google.charts.load('current', {'packages': ['table'], 'callback': drawTable});
	
	function drawTable() {
		
		var data = new google.visualization.DataTable();
				
		«FOR v:e.tuple.values»
		«IF v.eClass.name=="Text"»data.addColumn('string', '«v.name»');«ENDIF»
		«IF v.eClass.name=="Number"»data.addColumn('number', '«v.name»');«ENDIF»
		«ENDFOR»
		
		$.getJSON(«e.tuple.url.getURL», function(response){
			for(var i in response){
				data.addRows([[«FOR v:e.tuple.values»response[i]["«v.name»"],«ENDFOR»]]);
			}
			
			
			var cssClassNames={headerCell:'headerTable',tableRow:'rowTable'};
			var options={cssClassNames,width:'100%', height:'100%',allowHtml:true,alternatingRowStyle:false};
			var table = new google.visualization.Table(document.getElementById('«e.name»'));
			table.draw(data,options);      
			 
		}); //END getJSON	      	
	}
	'''
	
	def generatePy(TableChart e)'''
	"""
	Pie Chart Code generated - this code es generated based on DSL.
	
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
	
	"""
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import pandas as pd
	import json
	
	
	URL="«e.tuple.url.getURLforPython»"
	response=json.load(urlopen(URL))
	
	pd.DataFrame(response)
	'''
	
	
	def compileHTML(DashBoard e)'''
	  <html>
	  <head>
	  	<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	  	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	  	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	  	<script src="js/properties.js"></script>	
	  	«FOR chart:e.charts»
	  	<script src="js/«chart.name».js"></script>
	  	«ENDFOR»  	
	  
	  	<style type="text/css">
	    	
	    	/*General Labels*/
	    	body{
	    		margin: 0px;
	    		background: #CDCDCD;
	    	    text-align: center;
	    	}
	    	
	    	/*This code block delete default style in google table chart*/
	    	table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {
	    	    color: black;
	    		background-image: initial;
	    		background-repeat: initial;
	    		background-position: initial;
	    		-webkit-border-radius: initial;
	    		-moz-border-radius: initial;
	    		border-radius: initial;
	    		border-style: initial;
	    		border-width: initial;
	    		border-color: initial;
	    		background-color: initial;
	    		text-align: center;
	    		padding: 5px;
	    	
	    	}    	
	    		 
	        /*CLASS*/   	
	    	.headerTable{
	    		background-color: #1D7B9D;	
	    		color: white;
	    	}
	    	
	    	.rowTable{
	    		background-color: #C5DEE6;
	    	}
	    	
	    	.rowTable:hover{
	    	    background-color: #66AEC9;
	    	}
	    	
	    	.grafico_sencillo{
	    		background: white;
	    		min-width: 250px;
	    		width: 30%;
	    		height: 260px;
	    		margin: 10px;
	    		padding: 10px;
	    		display: inline-block;
	    	}
	    	
	    	.grafico_doble{
	    		background: white;
	    		width: 62.5%;
	    		height: 260px;
	    		margin: 10px;
	    		padding: 10px;
	    		display: inline-block;
	    	}
	    	
	    	.title{
	    		margin: 5px;
	    		font-family: Roboto, serif;
	    		text-align: center;
	    	    color: rgb(32, 33, 33);
	    	}
	    	
	    	/*IDS*/
	    	#table_div{
	    		position: absolute;
	    		z-index: auto;
	    		padding: 5px;
	    		height: 200px;
	    		width: 28%;
	    	}
	    		    	
	    	#title{
	    		width: 100%;
	    		height: 50px;
	    		line-height: 50px; 
	    		text-align: center;
	    		font-size: 28px;
	    		vertical-align: middle;
	    		color: white;
	    		font-family: Roboto, serif;
	    		background: #154061	    		    	
	    	}
	    </style>  
	  </head>
	  <body>
	    <div id="Title">«e.title.getTitle»</div>
	  	«FOR chart:e.charts»
	  	«chart.getChartBody»
	  	«ENDFOR» 	    
	  </body>
	  </html>
	'''
	
	def getChartBody(Chart c)'''
	«IF c.eClass.name=="PieChart" || c.eClass.name== "BarChart"|| c.eClass.name== "LineChart"»
	<div class="grafico_sencillo">
		<div class="title">«c.title.getTitle»</div>
		<div id="«c.name»"></div>
	</div>	
	«ENDIF»
	«IF c.eClass.name=="MapChart"»
	<div class="grafico_doble">
		<div class="title">«c.title.getTitle»</div>
		<div id="«c.name»" style="width:60%; height: 230px; position: absolute;"></div>
	</div>	
	«ENDIF»
	«IF c.eClass.name=="TableChart"»
	<div class="grafico_sencillo">
		<div class="title">«c.title.getTitle»</div>
		<div id="«c.name»" style="position: absolute; z-index: auto; padding: 5px; height: 200px; width: 28%;"></div>
	</div>	
	«ENDIF»
	'''
	
	def getTitle(Text t)'''«IF t !== null && t.value !== null»«t.value»«ELSE»Title«ENDIF»'''
	
	def getText(Text t)'''«IF t !== null && t.value !== null»'«t.value»'«ELSE»'no defined'«ENDIF»'''
	
	def getURLforPython(URL u)'''«IF u !== null && u.value !== null»«u.value»«ELSE»http://192.168.100.13:8080/paises«ENDIF»'''	
	
	def getURL(URL t)'''«IF t !== null && t.value !== null»«t.name»«ELSE»urlServerDefaul«ENDIF»'''	
}
