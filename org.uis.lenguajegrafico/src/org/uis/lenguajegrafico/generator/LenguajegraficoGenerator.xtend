/*
 * generated by Xtext 2.11.0
 */
package org.uis.lenguajegrafico.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import org.uis.lenguajegrafico.lenguajegrafico.PieChart
import org.uis.lenguajegrafico.lenguajegrafico.BarChart
import org.uis.lenguajegrafico.lenguajegrafico.LineChart
import org.uis.lenguajegrafico.lenguajegrafico.MapChart
import org.uis.lenguajegrafico.lenguajegrafico.TableChart
import org.uis.lenguajegrafico.lenguajegrafico.Text
import org.uis.lenguajegrafico.lenguajegrafico.URL
import org.uis.lenguajegrafico.lenguajegrafico.DashBoard
import org.uis.lenguajegrafico.lenguajegrafico.Title
import org.uis.lenguajegrafico.lenguajegrafico.Labelx
import org.uis.lenguajegrafico.lenguajegrafico.Labely
import org.uis.lenguajegrafico.lenguajegrafico.Legend
import org.uis.lenguajegrafico.lenguajegrafico.Hole
import org.uis.lenguajegrafico.lenguajegrafico.Orientation
import org.uis.lenguajegrafico.lenguajegrafico.Area
import org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel
import org.uis.lenguajegrafico.lenguajegrafico.MakerType
import org.uis.lenguajegrafico.lenguajegrafico.MapType
import org.uis.lenguajegrafico.lenguajegrafico.CellSize
import org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget
import org.uis.lenguajegrafico.lenguajegrafico.NormaliceData




/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LenguajegraficoGenerator extends AbstractGenerator {
    	
	@Inject extension IQualifiedNameProvider
	
	var Targuet="All";
	var Normalice="False";

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		
		
         
		 
		 if(resource.allContents.toIterable.filter(CodeGeneratedTarget).size!=0){
		 	Targuet=resource.allContents.toIterable.filter(CodeGeneratedTarget).get(0).value;
		 }
		 
		  if(resource.allContents.toIterable.filter(NormaliceData).size!=0){
		 	Normalice=resource.allContents.toIterable.filter(NormaliceData).get(0).value;
		 }
		
		//Generate properties file, in this file you configure the URL for the Web Service
		 if(Targuet=="All" || Targuet=="Web" ){
		 	fsa.generateFile("/Web/js/properties.js","");
		 }
		 		 		 
         for(e : resource.allContents.toIterable.filter(PieChart)){
         	 if(Targuet=="All"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 } else if(Targuet=="Web"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
         	 } else{
         	 	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 }
         	 
         }
         
         for(e : resource.allContents.toIterable.filter(BarChart)){
         	 if(Targuet=="All"){
	         	 fsa.generateFile("/Web/"+
	             	 	e.fullyQualifiedName.toString("/")+".html",
	             	 	e.generateHTML)   
	             fsa.generateFile("/Web/js/"+
	             	 	e.fullyQualifiedName.toString("/")+".js",
	             	 	e.generateJS)
	             fsa.generateFile("/python/"+
	             	 	e.fullyQualifiedName.toString("/")+".py",
	             	 	e.generatePy)
	        } else if(Targuet=="Web"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
         	 } else{
         	 	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 }
	                     	 	
         }
         
         for(e : resource.allContents.toIterable.filter(LineChart)){
         	 if(Targuet=="All"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 } else if(Targuet=="Web"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
         	 } else{
         	 	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 }   
         }
         
         
         for(e : resource.allContents.toIterable.filter(MapChart)){
         	if(Targuet=="All"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 } else if(Targuet=="Web"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
         	 } else{
         	 	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 }              
         }
         
         for(e : resource.allContents.toIterable.filter(TableChart)){
         	if(Targuet=="All"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
             	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 } else if(Targuet=="Web"){
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.generateHTML)   
             	fsa.generateFile("/Web/js/"+
             	 	e.fullyQualifiedName.toString("/")+".js",
             	 	e.generateJS)
         	 } else{
         	 	fsa.generateFile("/python/"+
             	 	e.fullyQualifiedName.toString("/")+".py",
             	 	e.generatePy)
         	 }            
         }
         
         
          for(e : resource.allContents.toIterable.filter(DashBoard)){
         	 if(Targuet=="All" || Targuet=="Web"){	
         	 	fsa.generateFile("/Web/"+
             	 	e.fullyQualifiedName.toString("/")+".html",
             	 	e.compileHTML)
             }
             	 	
         }
         
	 }
	 
	
	 
	 /* this is the method to generate Html file in a "default_location/web" folder.
	  * e is the Pie Chart Object with contain information from Metamodel to generate file.
	  */
	 def generateHTML(PieChart e)'''
	    <html>
	       <head>
	           <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	           <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	           <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	           <script src="js/properties.js"></script>
	           <script src="js/«e.name».js"></script>
	           <style type="text/css">
	            /*CLASS*/
	            .grafico{
	           		background: white;
	           		width: 50%;
	           		height: 300px;
	           		min-width: 250px;
	           		margin: 10px;
	           		padding: 10px;
	           		display: inline-block;
	           	}
	           	
	           	.grafico .title{
	           		margin: 5px;
	           		font-family: Roboto, serif;
	           		text-align: center;
	             	color: rgb(32, 33, 33);
	           	}
	           	#«e.name»{
	           		width: 100%;
	           		height: 100%;
	           	}
	           </style>
	       </head>
	       <body>
	         <div class="grafico">
	         	    <div class="title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
	         		<div id="«e.name»"></div>
	         </div>
	       </body>
	    </html>
	'''
	
	
	 /* this is the method to generate JavaScript file in a default_location/web/js folder.
	  * e is the Pie Chart Object with contain information from Metamodel to generate file.
	  */
	def generateJS(PieChart e)'''
	google.charts.load('current', {'packages':['corechart']});
	google.charts.setOnLoadCallback(drawChart«e.name»);

	«IF Normalice=="True"»
	//Normalice your data
	function normaliceData(t){
		for(x in t){
			for(var j = 0; j < t.length; j++){      
				if(t[x][0]==t[j][0] && x != j){
					t[x][1]=t[x][1]+t[j][1];
					t.splice(j,1);
					j=j-1;
				}
			}
		};
	}
	«ENDIF»
	
					                  
	function drawChart«e.name»() {
								
	$.getJSON(«e.tuple.url.getURL», function(response){
	
		var t=[["«e.tuple.value1.name»","«e.tuple.value2.name»"]]
		for(var i in response){
			if(response[i]["«e.tuple.value1.name»"] != "-"){
				t.push([response[i]["«e.tuple.value1.name»"],parseInt(response[i]["«e.tuple.value2.name»"])]);
			}
		}
		«IF Normalice=="True"»
		normaliceData(t);
		«ENDIF»
		var data = new google.visualization.arrayToDataTable(t);
		var options = {«IF e.features.filter(Legend).size !== 0»
		«IF e.features.filter(Legend).get(0).value == 'False'»legend:{ position:"none"},«ENDIF»«ENDIF»
		«IF e.features.filter(Hole).size !== 0»
		«IF e.features.filter(Hole).get(0).value == 'True'»pieHole: 0.4,«ENDIF»«ENDIF»
		chartArea:{width:'100%',height:'100%'},
		colors:['#378ED1','#3CAB65','#904C9F','#B7344C','#AAB929','#CE6B00','#219A94','#75AA73','#54315C','#7C1B2D','#6B6C64','#AFA318']};
					                          
		// Instantiate and draw our chart, passing in some options.
		var chart = new google.visualization.PieChart(document.getElementById('«e.name»'));
		chart.draw(data, options);
		}).fail(function( jqxhr, textStatus, error ) {
			var err = textStatus + ", " + error;
			console.log( "Request Failed: " + err );
		});//END getJSON
	}          
	'''
	
	def generatePy(PieChart e)'''
	"""
	Pie Chart Code generated - this code es generated based on DSL.
	"""
	
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import json
	
	«e.tuple.value1.name»=[]
	«e.tuple.value2.name»=[]
	
	URL="«e.tuple.url.value»"
	response=json.load(urlopen(URL))
	
	for i in response:
	    «e.tuple.value1.name».append(i["«e.tuple.value1.name»"])
	
	diccionario=list(set(«e.tuple.value1.name»))
	for i in diccionario:
	    «e.tuple.value2.name».append(0)   
	
	for i in response:
	    «e.tuple.value2.name»[diccionario.index(i["«e.tuple.value1.name»"])]+=int(i["«e.tuple.value2.name»"])
	
	plt.style.use('ggplot')
	fig, ax = plt.subplots()
	
	«IF e.features.filter(Hole).size !== 0»
	«IF e.features.filter(Hole).get(0).value == 'True'»
	centre_circle = plt.Circle((0,0),0.45,color='black', fc='white')
	fig = plt.gcf()
	fig.gca().add_artist(centre_circle)
	«ENDIF»«ENDIF»
	
	ax.pie(«e.tuple.value2.name», labels=diccionario, autopct='%1.1f%%', startangle=90)
	
	«IF e.features.filter(Title).size !== 0»ax.set_title("«e.features.filter(Title).get(0).value»")«ENDIF»	
	ax.axis('equal')
	
	fig_size = plt.rcParams["figure.figsize"]
	fig_size[0] = 4 #width
	fig_size[1] = 4 #Height
	plt.rcParams["figure.figsize"] = fig_size
	
	
	plt.show()
	'''
	
	def generateHTML(BarChart e)'''
	   <html>
	     <head>
	       <!--Load the AJAX API-->
	       	<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	        <script src="js/properties.js"></script>
	        <script src="js/«e.name».js"></script>
	        <style type="text/css">
	            /*CLASS*/
	        	.grafico{
	        		background: white;
	        		width: 50%;
	        		height: 300px;
	        		min-width: 250px;
	        		margin: 10px;
	        		padding: 10px;
	        		display: inline-block;
	        	}
	        	           	
	        	.grafico .title{
	        		margin: 5px;
	        		font-family: Roboto, serif;
	        		text-align: center;
	        		color: rgb(32, 33, 33);
	        	}
	        	#«e.name»{
	        		width: 100%;
	        		height: 100%;
	        	}
	       </style>
	   </head>	   
	   <body>
	       <div class="grafico">
	       	    <div class="title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
	       	    <div id="«e.name»"></div>
	       </div>
	   </body>
	   </html>
	'''
	def generateJS(BarChart e)'''
	google.charts.load('current', {packages: ['corechart', 'bar']});
	google.charts.setOnLoadCallback(drawBasic«e.name»);
		
	«IF Normalice=="True"»	
	//Normalice your data
	function normaliceData(t){
		for(x in t){
			for(var j = 0; j < t.length; j++){      
				if(t[x][0]==t[j][0] && x != j){
					t[x][1]=t[x][1]+t[j][1];
					t.splice(j,1);
					j=j-1;
				}
			}
		};
	}
	«ENDIF»
	
	function drawBasic«e.name»() {
				   
				   
	$.getJSON(«e.tuple.url.getURL», function(response){
		var t=[["«e.tuple.value1.name»"«FOR v:e.tuple.value2»,"«v.name»"«ENDFOR»]]
		for(var i in response){
			if(response[i]["«e.tuple.value1.name»"] != "-"){
				«IF e.tuple.value1 instanceof Text»
				t.push([response[i]["«e.tuple.value1.name»"]«FOR v:e.tuple.value2»,parseInt(response[i]["«v.name»"])«ENDFOR»]);
				«ELSE»
				t.push([parseInt(response[i]["«e.tuple.value1.name»"])«FOR v:e.tuple.value2»,parseInt(response[i]["«v.name»"])«ENDFOR»]);
				«ENDIF»
			}
		}
		
		«IF Normalice=="True"»	             
		normaliceData(t);		
		«ENDIF»		     
		var data = new google.visualization.arrayToDataTable(t);                                                                  
		var options = {«IF e.features.filter(Legend).size !== 0»
		«IF e.features.filter(Legend).get(0).value == 'False'»legend:{ position:"none"},«ENDIF»«ENDIF»
		«IF e.features.filter(Labelx).size !== 0»hAxis: {title:"«e.features.filter(Labelx).get(0).value»"},«ENDIF»
		«IF e.features.filter(Labely).size !== 0»vAxis: {title:"«e.features.filter(Labely).get(0).value»"},«ENDIF»
		chartArea:{width:'70%',height:'70%'},animation:{duration: 1000,easing: 'linear',startup: true}};
				     
		«IF e.features.filter(Orientation).size !== 0»
		«IF e.features.filter(Orientation).get(0).value == "Vertical"»
		var chart = new google.visualization.ColumnChart(document.getElementById('«e.name»'));
		«ELSE»
		var chart = new google.visualization.BarChart(document.getElementById('«e.name»'));
		«ENDIF»
		«ELSE»
		var chart = new google.visualization.ColumnChart(document.getElementById('«e.name»'));
		«ENDIF»               
				     
		chart.draw(data, options);       
		}).fail(function( jqxhr, textStatus, error ) {
					var err = textStatus + ", " + error;
					console.log( "Request Failed: " + err );
				});//END getJSON
	}
	'''
	def generatePy(BarChart e)'''
	"""
	Column Chart Code generated - this code es generated based on DSL.	
	"""
	
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import json
	import numpy as np
	
	colors=["#378ED1","#3CAB65","#904C9F","#B7344C","#AAB929","#CE6B00","#219A94"]
	column=0
	«IF e.tuple.value2.size>2»
	width = 0.30
	«ELSE»
	width = 0.50
	«ENDIF»
	
	«e.tuple.value1.name»=[]
	«FOR v:e.tuple.value2»
	«v.name»=[]
	«ENDFOR»
	
	URL="«e.tuple.url.value»"
	response=json.load(urlopen(URL))
	
	«IF e.tuple.value1 instanceof Text»
	
	for i in response:
	    if i["«e.tuple.value1.name»"] != "-":
	        «e.tuple.value1.name».append(i["«e.tuple.value1.name»"])
	
	diccionario=list(set(«e.tuple.value1.name»))
	
	for i in diccionario:
	    «FOR v:e.tuple.value2»
	    «v.name».append(0)
	    «ENDFOR» 
	
	x = np.arange(len(diccionario))
	
	for i in response:
	    «FOR v:e.tuple.value2»
	    «v.name»[diccionario.index(i["«e.tuple.value1.name»"])]+=int(i["«v.name»"])
	    «ENDFOR» 
	
	plt.style.use('ggplot')
	fig, ax = plt.subplots()
	
	
	«IF e.features.filter(Orientation).size !== 0»
	«IF e.features.filter(Orientation).get(0).value == "Vertical"»
	«FOR v:e.tuple.value2»
	ax.bar(x+width*column,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	if(column>1):
	    plt.xticks(x+width*column/column,diccionario, rotation='vertical')
	else:
	    plt.xticks(x+width/2,diccionario, rotation='vertical')
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.barh(x+width*column,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	if(column>1):
		plt.yticks(x+width*column/column,diccionario, rotation='horizontal')
	else:
		plt.yticks(x+width/2,diccionario, rotation='horizontal')
	«ENDIF»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.bar(x+width*column,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	if(column>1):
		plt.xticks(x+width*column/column,diccionario, rotation='vertical')
	else:
		plt.xticks(x+width/2,diccionario, rotation='vertical')
	«ENDIF»
	
	«ELSE»
	for i in response:
	    if i["«e.tuple.value1.name»"] != "-":
	        «e.tuple.value1.name».append(int(i["«e.tuple.value1.name»"]))
			
	diccionario=list(set(«e.tuple.value1.name»))
		
	for i in diccionario:
		«FOR v:e.tuple.value2»
		«v.name».append(0)
		«ENDFOR» 
	
	for i in response:
		«FOR v:e.tuple.value2»
		«v.name»[diccionario.index(int(i["«e.tuple.value1.name»"]))]+=int(i["«v.name»"])
		«ENDFOR» 
	

	fig, ax = plt.subplots()
	
	
	«IF e.features.filter(Orientation).size !== 0»
	«IF e.features.filter(Orientation).get(0).value == "Vertical"»
	«FOR v:e.tuple.value2»
	ax.bar(diccionario,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.barh(diccionario,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	«ENDIF»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.bar(diccionario,«v.name»,width,color=colors[column])
	column += 1
	«ENDFOR»
	«ENDIF»
	
	«ENDIF»
	
	
	«IF e.features.filter(Title).size !== 0»ax.set_title("«e.features.filter(Title).get(0).value»")«ENDIF»
	«IF e.features.filter(Labelx).size !== 0»ax.set_xlabel("«e.features.filter(Labelx).get(0).value»")«ENDIF»
	«IF e.features.filter(Labely).size !== 0»ax.set_ylabel("«e.features.filter(Labely).get(0).value»")«ENDIF»
	
	plt.style.use('ggplot')
	fig_size = plt.rcParams["figure.figsize"]
	fig_size[0] = 6 #width
	fig_size[1] = 4 #Height
	plt.rcParams["figure.figsize"] = fig_size
	
	plt.show()
	
	'''
		
	def generateHTML(LineChart e)'''
	<html>
	<head>
		<!--Load the AJAX API-->
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script src="js/properties.js"></script>
		<script src="js/«e.name».js"></script> 
		<style type="text/css">
			/*CLASS*/
			.grafico{
				background: white;
				width: 50%;
				height: 300px;
				min-width: 250px;
				margin: 10px;
				padding: 10px;
				display: inline-block;
			}
			
			.grafico .title{
				margin: 5px;
				font-family: Roboto, serif;
				text-align: center;
				color: rgb(32, 33, 33);
			}
	</style> 
	</head>
	<body>
	<div class="grafico">
		<div class="title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
		<div id="«e.name»"></div>
	</div>
	</html>
	'''	
	def generateJS(LineChart e)'''
	google.charts.load('current', {'packages':['corechart']});
	google.charts.setOnLoadCallback(drawChart«e.name»);
	
	«IF Normalice=="True"»
	//Normalice your data
	function normaliceData(t){
		for(x in t){
			for(var j = 0; j < t.length; j++){      
				if(t[x][0]==t[j][0] && x != j){
					t[x][1]=t[x][1]+t[j][1];
					t.splice(j,1);
					j=j-1;
				}
			}
		}
	}
	
	function comparar(a, b) {
	  return a[0] - b[0];
	}
	«ENDIF»
	
	function drawChart«e.name»() {
	
	$.getJSON(«e.tuple.url.getURL», function(response){
			var t=[["«e.tuple.value1.name»"«FOR v:e.tuple.value2»,"«v.name»"«ENDFOR»]]
			for(var i in response){
				if(response[i]["«e.tuple.value1.name»"] != "-"){
					«IF e.tuple.value1 instanceof Text»
					t.push([response[i]["«e.tuple.value1.name»"]«FOR v:e.tuple.value2»,parseInt(response[i]["«v.name»"])«ENDFOR»]);
					«ELSE»
					t.push([parseInt(response[i]["«e.tuple.value1.name»"])«FOR v:e.tuple.value2»,parseInt(response[i]["«v.name»"])«ENDFOR»]);
					«ENDIF»
				}
			}
		    
			«IF Normalice=="True"»	             
			normaliceData(t);
			t.sort(comparar);
			«ENDIF»
			
							     
			var data = new google.visualization.arrayToDataTable(t);                                                                  
			var options = {«IF e.features.filter(Legend).size !== 0»
			«IF e.features.filter(Legend).get(0).value == 'False'»legend:{ position:"none"},«ENDIF»«ENDIF»
			«IF e.features.filter(Labelx).size !== 0»hAxis: {title:"«e.features.filter(Labelx).get(0).value»"},«ENDIF»
			«IF e.features.filter(Labely).size !== 0»vAxis: {title:"«e.features.filter(Labely).get(0).value»"},«ENDIF»
			chartArea:{width:'70%',height:'70%'},animation:{duration: 1000,easing: 'linear',startup: true}};
					     
			«IF e.features.filter(Area).size !== 0»
			«IF e.features.filter(Area).get(0).value == "True"»
			var chart = new google.visualization.AreaChart(document.getElementById('«e.name»'));
			«ELSE»
			var chart = new google.visualization.LineChart(document.getElementById('«e.name»'));
			«ENDIF»
			«ELSE»
			var chart = new google.visualization.LineChart(document.getElementById('«e.name»'));
			«ENDIF»               
					     
			chart.draw(data, options);       
		}).fail(function( jqxhr, textStatus, error ) {
					var err = textStatus + ", " + error;
					console.log( "Request Failed: " + err );
				});//END getJSON
	}  
	
	'''
	def generatePy(LineChart e)'''
	"""
	Column Chart Code generated - this code es generated based on DSL.	
	"""
		
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import json
	import numpy as np
		
		
	column=0
	
	«e.tuple.value1.name»=[]
	«FOR v:e.tuple.value2»
	«v.name»=[]
	«ENDFOR»
		
	URL="«e.tuple.url.value»"
	response=json.load(urlopen(URL))
		
	«IF e.tuple.value1 instanceof Text»
		
	for i in response:
	    if i["«e.tuple.value1.name»"] != "-":
	        «e.tuple.value1.name».append(i["«e.tuple.value1.name»"])
		
	diccionario=list(set(«e.tuple.value1.name»))
		
	for i in diccionario:
	    «FOR v:e.tuple.value2»
	    «v.name».append(0)
	    «ENDFOR» 
		
	x = np.arange(len(diccionario))
		
	for i in response:
	    «FOR v:e.tuple.value2»
	    «v.name»[diccionario.index(i["«e.tuple.value1.name»"])]+=int(i["«v.name»"])
	    «ENDFOR» 
		
	plt.style.use('ggplot')
	fig, ax = plt.subplots()
		
		
	«IF e.features.filter(Area).size !== 0»
	«IF e.features.filter(Area).get(0).value == "True"»
	«FOR v:e.tuple.value2»
	ax.stackplot(x,«v.name»)
	«ENDFOR»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.plot(x,«v.name»)
	«ENDFOR»
	«ENDIF»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.plot(x,«v.name»)
	«ENDFOR»
	«ENDIF»
	plt.xticks(x,diccionario,rotation='vertical')
	«ELSE»
	for i in response:
	    if i["«e.tuple.value1.name»"] != "-":
	         «e.tuple.value1.name».append(int(i["«e.tuple.value1.name»"]))
				
	diccionario=list(set(«e.tuple.value1.name»))
			
	for i in diccionario:
	    «FOR v:e.tuple.value2»
	    «v.name».append(0)
	    «ENDFOR» 
		
	for i in response:
	    «FOR v:e.tuple.value2»
	    «v.name»[diccionario.index(int(i["«e.tuple.value1.name»"]))]+=int(i["«v.name»"])
		«ENDFOR» 
		
	
	plt.style.use('ggplot')
	fig, ax = plt.subplots()
		
	«IF e.features.filter(Area).size !== 0»
	«IF e.features.filter(Area).get(0).value == "True"»
	«FOR v:e.tuple.value2»
	ax.stackplot(diccionario,«v.name»)
	«ENDFOR»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.plot(diccionario,«v.name»)
	«ENDFOR»
	«ENDIF»
	«ELSE»
	«FOR v:e.tuple.value2»
	ax.plot(diccionario,«v.name»)
	«ENDFOR»
	«ENDIF»
	«ENDIF»
		
		
	«IF e.features.filter(Title).size !== 0»ax.set_title("«e.features.filter(Title).get(0).value»")«ENDIF»
	«IF e.features.filter(Labelx).size !== 0»ax.set_xlabel("«e.features.filter(Labelx).get(0).value»")«ENDIF»
	«IF e.features.filter(Labely).size !== 0»ax.set_ylabel("«e.features.filter(Labely).get(0).value»")«ENDIF»
		
	
	fig_size = plt.rcParams["figure.figsize"]
	fig_size[0] = 6 #width
	fig_size[1] = 4 #Height
	plt.rcParams["figure.figsize"] = fig_size
	plt.show()
	'''
	
	
	
	def generateHTML(MapChart e)'''
	<html>
	<head>
	«IF e.features.filter(MakerType).size !== 0 && e.features.filter(MakerType).get(0).value == "Group" »
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script src="js/properties.js"></script>
	<script src="js/«e.name».js"></script>
	<script async defer
	src="https://maps.googleapis.com/maps/api/js?callback=initMap">
	</script>
	<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
	«ELSE»
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script src="http://maps.google.com/maps/api/js"></script>
	<script src="js/properties.js"></script>
	<script src="js/«e.name».js"></script>
	«ENDIF»
	<style type="text/css">
	   	    /*CLASS*/
	   		.grafico{
	   			background: white;
	   			text-aling:center;
	   			width: 70%;
	   			height: 500px;
	   			margin: 10px;
	   			padding: 10px;
	   			display: inline-block;
	   		}
	   		.grafico .title{
	   			margin: 5px;
	   			font-family: Roboto, serif;
	   			text-align: center;
	   			color: rgb(32, 33, 33);
	   		}
	   		/*IDS*/
	   		#«e.name»{
	   			width: 70%;
	   		    height: 500px;
	   		    position: absolute;
	   		}	   		
	   </style> 
	  </head>
	  <body>
	    <div class="grafico">
	    	    	<div class="title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
	    	      	<div id="«e.name»"></div>
	    </div>
	  </body>
	</html>
	'''
	def generateJS(MapChart e)'''
	
	«IF e.features.filter(MakerType).size == 0 || e.features.filter(MakerType).get(0).value == "Normal" »
	google.charts.load('current', {'packages': ['map'], 'callback': drawChart});
		      
	function drawChart() {
		      	
	var data = new google.visualization.DataTable();
		      	
	$.getJSON(«e.tuple.url.getURL», function(response){
		var t=[["«e.tuple.value1.name»","«e.tuple.value2.name»","«e.tuple.value3.name»"]]
		for(var i in response){
			«IF e.tuple.value3 instanceof Text»
			t.push([parseFloat(response[i]["«e.tuple.value1.name»"]),parseFloat(response[i]["«e.tuple.value2.name»"]),response[i]["«e.tuple.value3.name»"]]);
			«ELSE»
			t.push([parseFloat(response[i]["«e.tuple.value1.name»"]),parseFloat(response[i]["«e.tuple.value2.name»"]),parseFloat(response[i]["«e.tuple.value3.name»"])]);
			«ENDIF»
		}
		      
		var options = {
		«IF e.features.filter(ZoomLevel).size !== 0»
		«IF e.features.filter(ZoomLevel).get(0).value <= 15» 
		zoomLevel: «e.features.filter(ZoomLevel).get(0).value»,
		«ELSE»
		zoomLevel: 10,
		«ENDIF»
		«ELSE»
		zoomLevel: 10,
		«ENDIF»
		enableScrollWheel:true,
		showTooltip: true,
		showInfoWindow: true,
		«IF e.features.filter(MapType).size !== 0»
		«IF e.features.filter(MapType).get(0).value == "general"» 
		mapType: 'styledMap',
		useMapTypeControl: true
		«ELSE»
		mapType: '«e.features.filter(MapType).get(0).value»'
		«ENDIF»
		«ELSE»
		mapType: 'styledMap',
		useMapTypeControl: true
		«ENDIF»
		};
		
		var data = new google.visualization.arrayToDataTable(t);       
		var chart = new google.visualization.Map(document.getElementById('«e.name»'));
		chart.draw(data, options);       
		}).fail(function( jqxhr, textStatus, error ) {
					var err = textStatus + ", " + error;
					console.log( "Request Failed: " + err );
				});//END getJSON      	
	}
	«ELSE»
	«IF e.features.filter(MakerType).get(0).value == "MagnitudeCircle"»
	function initialize() {
	
	$.getJSON(«e.tuple.url.getURL», function(response){
	        
	var latTotal=0.0;
	var longTotal=0.0;
	for(var i in response){
	    latTotal+=parseFloat(response[i]["«e.tuple.value1.name»"]);
	    longTotal+=parseFloat(response[i]["«e.tuple.value2.name»"]);
	}
	
	var mapAttr = {
	center: new google.maps.LatLng(latTotal/response.length,longTotal/response.length),
	«IF e.features.filter(ZoomLevel).size == 0 || e.features.filter(ZoomLevel).get(0).value > 15»
	zoom: 10,
	«ELSE»
	zoom: «e.features.filter(ZoomLevel).get(0).value»,
	«ENDIF»
	«IF e.features.filter(MapType).size == 0 || e.features.filter(MapType).get(0).value == "general"»
	mapTypeId: 'roadmap'
	«ELSE»
	mapTypeId: '«e.features.filter(MapType).get(0).value»'
	«ENDIF»	
	};
	
	var map = new google.maps.Map(document.getElementById("«e.name»"), mapAttr);
	
	for(var i in response){
	
	var center = new google.maps.LatLng(parseFloat(response[i]["«e.tuple.value1.name»"]),parseFloat(response[i]["«e.tuple.value2.name»"]));
	var magnitude=Math.abs(response[i]["«e.tuple.value3.name»"]);
	
	var circle = new google.maps.Circle({
	    center: center,
	    map: map,
	    radius: Math.pow(magnitude,3)*500,// IN METERS.
	    fillColor: "#F90F0F",
	    fillOpacity: 0.4,
	    strokeColor: "#FFF",
	    strokeWeight: 0
	    });
	}});//END GET JSON
	}
	google.maps.event.addDomListener(window, 'load', initialize);
	«ELSE»
	function initMap() {	
	
	// Create an array of alphabetical characters used to label the markers.
	var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	
	$.getJSON(«e.tuple.url.getURL», function(response){
	
	var latTotal=0.0;
	var longTotal=0.0;
	for(var i in response){
	    latTotal+=parseFloat(response[i]["«e.tuple.value1.name»"]);
	    longTotal+=parseFloat(response[i]["«e.tuple.value2.name»"]);
	}
	
	var map = new google.maps.Map(document.getElementById('«e.name»'), {
		«IF e.features.filter(ZoomLevel).size == 0 || e.features.filter(ZoomLevel).get(0).value > 15»
		zoom: 7,
		«ELSE»
		zoom: «e.features.filter(ZoomLevel).get(0).value»,
		«ENDIF»
		«IF e.features.filter(MapType).size == 0 || e.features.filter(MapType).get(0).value == "general"»
		mapTypeId: 'roadmap',
		«ELSE»
		mapTypeId: '«e.features.filter(MapType).get(0).value»',
		«ENDIF»	
		center: new google.maps.LatLng(latTotal/response.length,longTotal/response.length)
	}).fail(function( jqxhr, textStatus, error ) {
				var err = textStatus + ", " + error;
				console.log( "Request Failed: " + err );
			});//END getJSON
	
	
	
	var locations = []
	for(var i in response){
	    locations.push({lat:parseInt(response[i]["«e.tuple.value1.name»"]), lng:parseInt(response[i]["«e.tuple.value2.name»"])});
	}
	
	var markers = locations.map(function(location, i) {
	    return new google.maps.Marker({
	        position: location,
	        label: labels[i % labels.length]
	    });
	});
	
	// Add a marker clusterer to manage the markers.
	    var markerCluster = new MarkerClusterer(map, markers,
	        {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
	});//END GET JSON
	}
	«ENDIF»
	«ENDIF»
	
	'''
	
	def generatePy(MapChart e)'''
	"""
	Map Chart Code generated - this code es generated based on DSL.
		
	Autor: Henry Jimenez - Maria Fernanda Guerrero
	Version: 24/05/2017
		
	"""
		
	from __future__ import print_function
	from __future__ import division
	from urllib.request import urlopen
	from PIL import Image
	import numpy as np
	import json
	import requests
		
	def get_static_google_map(zoom=14, imgsize="500x500", imgformat="jpeg",maptype="hybrid", markers=None ):
				    
	    baseURL  =  "http://maps.google.com/maps/api/staticmap?"
	    baseURL += "zoom=%i&" % zoom  # zoom 0 (all of the world scale ) to 22 (single buildings scale)
	    baseURL += "size=%s&" % (imgsize) 
	    baseURL += "format=%s&" % imgformat
	    baseURL += "maptype=%s&" % maptype  # roadmap, satellite, hybrid, terrain
	    if markers != None:
	        baseURL += markers
	    return baseURL
	
	def save_imagen(StrMakers):
	    «IF e.features.filter(ZoomLevel).size == 0 || e.features.filter(ZoomLevel).get(0).value > 15»
	    zoom = 7
	    «ELSE»
	    zoom = «e.features.filter(ZoomLevel).get(0).value»
	    «ENDIF»	    
	    «IF e.features.filter(MapType).size == 0 || e.features.filter(MapType).get(0).value == "general"»
	    maptype= 'roadmap'
		«ELSE»
	    maptype= '«e.features.filter(MapType).get(0).value»'
		«ENDIF»		
	    url = get_static_google_map(zoom=zoom,markers=StrMakers,maptype=maptype)
	    r = sesion.get(url)
	    f=open('%s.png' % FileName,'wb')
	    f.write(r.content)
	    f.close()
	
	FileName="«e.name»"
	URL="«e.tuple.url.value»"
	respuesta=json.load(urlopen(URL))
	
	StrMakers = "markers=color:red"
	for r in respuesta[:100]:
	    StrMakers += "|%s" % str(r["«e.tuple.value1.name»"])+","+str(r["«e.tuple.value2.name»"])
	
	sesion = requests.Session()
	
	save_imagen(StrMakers)
	imagen = Image.open('%s.png' % FileName)
	imagen
	'''
	def generateHTML(TableChart e)'''
	<html>
	<head>
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script src="js/properties.js"></script>
		<script src="js/«e.name».js"></script>
		<style type="text/css">
		
		/*This code block delete default style in google table chart*/
		table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {
		    color: black;
			background-image: initial;
			background-repeat: initial;
			background-position: initial;
			-webkit-border-radius: initial;
			-moz-border-radius: initial;
			border-radius: initial;
			border-style: initial;
			border-width: initial;
			border-color: initial;
			background-color: initial;
			text-align: center;
			padding: 5px;
		
		}
		
		/*CLASS*/
		.grafico{
			background: white;
			text-aling:center;
			width: 30%;
			height: 400px;
			margin: 10px;
			padding: 10px;
			display: inline-block;
		}
		.grafico .title{
			margin: 5px;
			font-size: 30px;
			font-family: Roboto, serif;
			text-align: center;
			color: rgb(32, 33, 33);
		}
		
		.headerTable{
			background-color: #1D7B9D;	
			color: white;
		}
		
		.rowTable{
			background-color: #C5DEE6;
		}
		
		.rowTable:hover{
		    background-color: #66AEC9;
		}
		
		/*IDS*/
		#«e.name»{
			position: absolute;
			z-index: auto;
			padding: 5px;
			height: 400px;
			width: 50%;
		}	   		
		</style> 
	</head>
	<body>
		<div class="grafico">
			<div class="title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
			<div id="«e.name»"></div>
		</div>
	</body>
	</html>	
	'''
	
	def generateJS(TableChart e)'''
	google.charts.load('current', {'packages': ['table'], 'callback': drawTable});
	
	function drawTable() {
		
		$.getJSON(«e.tuple.url.getURL», function(response){
		var t=[[«FOR v:e.tuple.values»"«v.name»",«ENDFOR»]];
		for(var i in response){
		    t.push([«FOR v:e.tuple.values»«IF v instanceof Text»response[i]["«v.name»"],«ELSE»«IF v instanceof Number»parseInt(response[i]["«v.name»"]),«ENDIF»parseFloat(response[i]["«v.name»"]),«ENDIF»«ENDFOR»]);
		}
		
		var data = new google.visualization.arrayToDataTable(t);
		var cssClassNames={headerCell:'headerTable',tableRow:'rowTable'};
		var options={cssClassNames,width:'90%', height:'90%',allowHtml:true,alternatingRowStyle:false};
		var table = new google.visualization.Table(document.getElementById('«e.name»'));
		table.draw(data,options);      
			 
		}).fail(function( jqxhr, textStatus, error ) {
					var err = textStatus + ", " + error;
					console.log( "Request Failed: " + err );
				});//END getJSON     	
	}
	'''
	
	def generatePy(TableChart e)'''
	"""
	Pie Chart Code generated - this code es generated based on DSL.
	"""
	from urllib.request import urlopen
	import matplotlib.pyplot as plt
	import pandas as pd
	import json
	
	
	URL="«e.tuple.url.value»"
	response=json.load(urlopen(URL))
	
	pd.DataFrame(response,columns=[«FOR v:e.tuple.values»'«v.name»',«ENDFOR»])
	'''
	
	
	def compileHTML(DashBoard e)'''
	  <html>
	  <head>
	  	<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
	  	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	  	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	  	<script src="js/properties.js"></script>	
	  	«FOR chart:e.charts»
	  	<script src="js/«chart.name».js"></script>
	  	«ENDFOR»  	
	  
	  	<style type="text/css">
	    	
	    	/*General Labels*/
	    	body{
	    		margin: 0px;
	    		background: #CDCDCD;
	    	    text-align: center;
	    	}
	    	
	    	/*This code block delete default style in google table chart*/
	    	table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {
	    	    color: black;
	    		background-image: initial;
	    		background-repeat: initial;
	    		background-position: initial;
	    		-webkit-border-radius: initial;
	    		-moz-border-radius: initial;
	    		border-radius: initial;
	    		border-style: initial;
	    		border-width: initial;
	    		border-color: initial;
	    		background-color: initial;
	    		text-align: center;
	    		padding: 5px;
	    	
	    	}    	
	    		 
	        /*CLASS*/   	
	    	.headerTable{
	    		background-color: #1D7B9D;	
	    		color: white;
	    	}
	    	
	    	.rowTable{
	    		background-color: #C5DEE6;
	    	}
	    	
	    	.rowTable:hover{
	    	    background-color: #66AEC9;
	    	}
	    	
	    	.g1x1 {
	    		background: white;
	    		min-width: 250px;
	    		width: 30%;
	    		height: 260px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.g1x2 {
	    		background: white;
	    		width: 62.5%;
	    		height: 260px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.g1x3 {
	    	 	background: white;
	    		width: 95%;
	    		height: 260px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.g2x1 {
	    		background: white;
	    		width: 30%;
	    		height: 550px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.g2x2 {
	    	    background: white;
	    		width: 62.5%;
	    		height: 550px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.g3x3 {
	    	 	background: white;
	    		width: 95%;
	    		height: 550px;
	    		margin: 5px;
	    		padding: 10px;
	    		float: left;
	    	}
	    	
	    	.t1x1{
	    		position: absolute;
	    		padding: 5px;
	    		height: 200px;
	    		width: 28%;
	    	}
	    	
	    	.t1x2{
	    		position: absolute;
	    		padding: 5px;
	    		height: 200px;
	    		width: 60%;
	    	}
	    	
	    	.t1x3{
	    		position: absolute;
	    		padding: 5px;
	    		height: 200px;
	    		width: 90%;
	    	}
	    	
	    	.t2x1{
	    		position: absolute;
	    		padding: 5px;
	    		height: 520px;
	    		width: 28%;
	    	}
	    	
	    	.t2x2{
	    		position: absolute;
	    		padding: 5px;
	    		height: 520px;
	    		width: 60%;
	    	}
	    	
	    	.t3x3{
	    		position: absolute;
	    		padding: 5px;
	    		height: 520px;
	    		width: 95%;
	    	}
	    	
	    	.title{
	    		margin: 5px;
	    		font-family: Roboto, serif;
	    		text-align: center;
	    	    color: rgb(32, 33, 33);
	    	}
	    	
	    		    	
	    	#title{
	    		width: 100%;
	    		height: 50px;
	    		line-height: 50px; 
	    		text-align: center;
	    		font-size: 28px;
	    		vertical-align: middle;
	    		color: white;
	    		font-family: Roboto, serif;
	    		background: #154061	    		    	
	    	}
	    </style>  
	  </head>
	  <body>
	  <div id="Title">«IF e.features.filter(Title).size !== 0»«e.features.filter(Title).get(0).value»«ENDIF»</div>
	  <div style="margin-left:3%;">
	  	«FOR chart:e.charts»
	  	«IF chart instanceof PieChart»
	  	<div class="g«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»">
	  			<div class="title">«IF chart.features.filter(Title).size !== 0»«chart.features.filter(Title).get(0).value»«ENDIF»</div>
	  			<div id="«chart.name»" style="width: 100%; height: 90%;"></div>
	  	</div>
	  	«ENDIF»
	  	«IF chart instanceof BarChart»
	  	<div class="g«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»">
	  		<div class="title">«IF chart.features.filter(Title).size !== 0»«chart.features.filter(Title).get(0).value»«ENDIF»</div>
	  		<div id="«chart.name»" style="width: 100%; height: 90%;"></div>
	  	</div>
	  	«ENDIF»
	  	«IF chart instanceof LineChart»
	  	<div class="g«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»">
	  		<div class="title">«IF chart.features.filter(Title).size !== 0»«chart.features.filter(Title).get(0).value»«ENDIF»</div>
	  		<div id="«chart.name»" style="width: 100%; height: 90%;"></div>
	  	</div>
	  	«ENDIF»
	  	«IF chart instanceof MapChart»
	  	<div class="g«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»">
	  		<div class="title">«IF chart.features.filter(Title).size !== 0»«chart.features.filter(Title).get(0).value»«ENDIF»</div>
	  		<div id="«chart.name»"></div>
	  	</div>
	  	«ENDIF»
	  	«IF chart instanceof TableChart»
	  	<div class="g«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»">
	  		<div class="title">«IF chart.features.filter(Title).size !== 0»«chart.features.filter(Title).get(0).value»«ENDIF»</div>
	  		<div id="«chart.name»" class="t«IF chart.features.filter(CellSize).size !== 0»«chart.features.filter(CellSize).get(0).value»«ELSE»1x1«ENDIF»"></div>
	  	</div>
	  	«ENDIF»
	  	«ENDFOR» 	 
	  </div>   
	  </body>
	  </html>
	'''
	
	def getURL(URL t)'''"«t.value»"'''	
}
