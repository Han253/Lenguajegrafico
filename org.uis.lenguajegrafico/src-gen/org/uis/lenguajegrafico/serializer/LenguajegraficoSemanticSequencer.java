/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.uis.lenguajegrafico.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.uis.lenguajegrafico.lenguajegrafico.Area;
import org.uis.lenguajegrafico.lenguajegrafico.BarChart;
import org.uis.lenguajegrafico.lenguajegrafico.CellSize;
import org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget;
import org.uis.lenguajegrafico.lenguajegrafico.DashBoard;
import org.uis.lenguajegrafico.lenguajegrafico.Hole;
import org.uis.lenguajegrafico.lenguajegrafico.Labelx;
import org.uis.lenguajegrafico.lenguajegrafico.Labely;
import org.uis.lenguajegrafico.lenguajegrafico.Legend;
import org.uis.lenguajegrafico.lenguajegrafico.Lenguajegrafico;
import org.uis.lenguajegrafico.lenguajegrafico.LenguajegraficoPackage;
import org.uis.lenguajegrafico.lenguajegrafico.LineChart;
import org.uis.lenguajegrafico.lenguajegrafico.MakerType;
import org.uis.lenguajegrafico.lenguajegrafico.MapChart;
import org.uis.lenguajegrafico.lenguajegrafico.MapType;
import org.uis.lenguajegrafico.lenguajegrafico.NormaliceData;
import org.uis.lenguajegrafico.lenguajegrafico.Orientation;
import org.uis.lenguajegrafico.lenguajegrafico.PieChart;
import org.uis.lenguajegrafico.lenguajegrafico.TableChart;
import org.uis.lenguajegrafico.lenguajegrafico.Text;
import org.uis.lenguajegrafico.lenguajegrafico.Title;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple1;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple2;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple3;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple4;
import org.uis.lenguajegrafico.lenguajegrafico.URL;
import org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel;
import org.uis.lenguajegrafico.services.LenguajegraficoGrammarAccess;

@SuppressWarnings("all")
public class LenguajegraficoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LenguajegraficoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LenguajegraficoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LenguajegraficoPackage.AREA:
				sequence_Area(context, (Area) semanticObject); 
				return; 
			case LenguajegraficoPackage.BAR_CHART:
				sequence_BarChart(context, (BarChart) semanticObject); 
				return; 
			case LenguajegraficoPackage.CELL_SIZE:
				sequence_CellSize(context, (CellSize) semanticObject); 
				return; 
			case LenguajegraficoPackage.CODE_GENERATED_TARGET:
				sequence_CodeGeneratedTarget(context, (CodeGeneratedTarget) semanticObject); 
				return; 
			case LenguajegraficoPackage.DASH_BOARD:
				sequence_DashBoard(context, (DashBoard) semanticObject); 
				return; 
			case LenguajegraficoPackage.FLOAT:
				sequence_Float(context, (org.uis.lenguajegrafico.lenguajegrafico.Float) semanticObject); 
				return; 
			case LenguajegraficoPackage.HOLE:
				sequence_Hole(context, (Hole) semanticObject); 
				return; 
			case LenguajegraficoPackage.LABELX:
				sequence_Labelx(context, (Labelx) semanticObject); 
				return; 
			case LenguajegraficoPackage.LABELY:
				sequence_Labely(context, (Labely) semanticObject); 
				return; 
			case LenguajegraficoPackage.LEGEND:
				sequence_Legend(context, (Legend) semanticObject); 
				return; 
			case LenguajegraficoPackage.LENGUAJEGRAFICO:
				sequence_Lenguajegrafico(context, (Lenguajegrafico) semanticObject); 
				return; 
			case LenguajegraficoPackage.LINE_CHART:
				sequence_LineChart(context, (LineChart) semanticObject); 
				return; 
			case LenguajegraficoPackage.MAKER_TYPE:
				sequence_MakerType(context, (MakerType) semanticObject); 
				return; 
			case LenguajegraficoPackage.MAP_CHART:
				sequence_MapChart(context, (MapChart) semanticObject); 
				return; 
			case LenguajegraficoPackage.MAP_TYPE:
				sequence_MapType(context, (MapType) semanticObject); 
				return; 
			case LenguajegraficoPackage.NORMALICE_DATA:
				sequence_NormaliceData(context, (NormaliceData) semanticObject); 
				return; 
			case LenguajegraficoPackage.NUMBER:
				sequence_Number(context, (org.uis.lenguajegrafico.lenguajegrafico.Number) semanticObject); 
				return; 
			case LenguajegraficoPackage.ORIENTATION:
				sequence_Orientation(context, (Orientation) semanticObject); 
				return; 
			case LenguajegraficoPackage.PIE_CHART:
				sequence_PieChart(context, (PieChart) semanticObject); 
				return; 
			case LenguajegraficoPackage.TABLE_CHART:
				sequence_TableChart(context, (TableChart) semanticObject); 
				return; 
			case LenguajegraficoPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case LenguajegraficoPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			case LenguajegraficoPackage.TUPLE1:
				sequence_Tuple1(context, (Tuple1) semanticObject); 
				return; 
			case LenguajegraficoPackage.TUPLE2:
				sequence_Tuple2(context, (Tuple2) semanticObject); 
				return; 
			case LenguajegraficoPackage.TUPLE3:
				sequence_Tuple3(context, (Tuple3) semanticObject); 
				return; 
			case LenguajegraficoPackage.TUPLE4:
				sequence_Tuple4(context, (Tuple4) semanticObject); 
				return; 
			case LenguajegraficoPackage.URL:
				sequence_URL(context, (URL) semanticObject); 
				return; 
			case LenguajegraficoPackage.ZOOM_LEVEL:
				sequence_ZoomLevel(context, (ZoomLevel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Area returns Area
	 *
	 * Constraint:
	 *     (value='True' | value='False')
	 */
	protected void sequence_Area(ISerializationContext context, Area semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns BarChart
	 *     Chart returns BarChart
	 *     BarChart returns BarChart
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         tuple=[Tuple2|ID] 
	 *         (
	 *             features+=Title | 
	 *             features+=Legend | 
	 *             features+=Labelx | 
	 *             features+=Labely | 
	 *             features+=Orientation | 
	 *             features+=CellSize
	 *         )*
	 *     )
	 */
	protected void sequence_BarChart(ISerializationContext context, BarChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellSize returns CellSize
	 *
	 * Constraint:
	 *     (
	 *         value='1x1' | 
	 *         value='1x2' | 
	 *         value='1x3' | 
	 *         value='2x1' | 
	 *         value='2x2' | 
	 *         value='3x3'
	 *     )
	 */
	protected void sequence_CellSize(ISerializationContext context, CellSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns CodeGeneratedTarget
	 *     Configuration returns CodeGeneratedTarget
	 *     CodeGeneratedTarget returns CodeGeneratedTarget
	 *
	 * Constraint:
	 *     (value='All' | value='Web' | value='Python')
	 */
	protected void sequence_CodeGeneratedTarget(ISerializationContext context, CodeGeneratedTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns DashBoard
	 *     DashBoard returns DashBoard
	 *
	 * Constraint:
	 *     (name=ID charts+=[Chart|ID]+ features+=Title*)
	 */
	protected void sequence_DashBoard(ISerializationContext context, DashBoard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Datatype returns Float
	 *     Float returns Float
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Float(ISerializationContext context, org.uis.lenguajegrafico.lenguajegrafico.Float semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Hole returns Hole
	 *
	 * Constraint:
	 *     (value='True' | value='False')
	 */
	protected void sequence_Hole(ISerializationContext context, Hole semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Labelx returns Labelx
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Labelx(ISerializationContext context, Labelx semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.LABELX__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.LABELX__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelxAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Labely returns Labely
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Labely(ISerializationContext context, Labely semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.LABELY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.LABELY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelyAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Legend returns Legend
	 *
	 * Constraint:
	 *     (value='True' | value='False')
	 */
	protected void sequence_Legend(ISerializationContext context, Legend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lenguajegrafico returns Lenguajegrafico
	 *
	 * Constraint:
	 *     elements+=Element+
	 */
	protected void sequence_Lenguajegrafico(ISerializationContext context, Lenguajegrafico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns LineChart
	 *     Chart returns LineChart
	 *     LineChart returns LineChart
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         tuple=[Tuple2|ID] 
	 *         (
	 *             features+=Title | 
	 *             features+=Legend | 
	 *             features+=Labelx | 
	 *             features+=Labely | 
	 *             features+=Area | 
	 *             features+=CellSize
	 *         )*
	 *     )
	 */
	protected void sequence_LineChart(ISerializationContext context, LineChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MakerType returns MakerType
	 *
	 * Constraint:
	 *     (value='Normal' | value='Group' | value='MagnitudeCircle')
	 */
	protected void sequence_MakerType(ISerializationContext context, MakerType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MapChart
	 *     Chart returns MapChart
	 *     MapChart returns MapChart
	 *
	 * Constraint:
	 *     (name=ID tuple=[Tuple3|ID] (features+=Title | features+=ZoomLevel | features+=MakerType | features+=MapType | features+=CellSize)*)
	 */
	protected void sequence_MapChart(ISerializationContext context, MapChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MapType returns MapType
	 *
	 * Constraint:
	 *     (value='general' | value='roadmap' | value='terrain' | value='satellite' | value='hybrid')
	 */
	protected void sequence_MapType(ISerializationContext context, MapType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns NormaliceData
	 *     Configuration returns NormaliceData
	 *     NormaliceData returns NormaliceData
	 *
	 * Constraint:
	 *     (value='True' | value='False')
	 */
	protected void sequence_NormaliceData(ISerializationContext context, NormaliceData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Datatype returns Number
	 *     Number returns Number
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Number(ISerializationContext context, org.uis.lenguajegrafico.lenguajegrafico.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Orientation returns Orientation
	 *
	 * Constraint:
	 *     (value='Horizontal' | value='Vertical')
	 */
	protected void sequence_Orientation(ISerializationContext context, Orientation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns PieChart
	 *     Chart returns PieChart
	 *     PieChart returns PieChart
	 *
	 * Constraint:
	 *     (name=ID tuple=[Tuple1|ID] (features+=Title | features+=Legend | features+=Hole | features+=CellSize)*)
	 */
	protected void sequence_PieChart(ISerializationContext context, PieChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns TableChart
	 *     Chart returns TableChart
	 *     TableChart returns TableChart
	 *
	 * Constraint:
	 *     (name=ID tuple=[Tuple4|ID] (features+=Title | features+=CellSize)*)
	 */
	protected void sequence_TableChart(ISerializationContext context, TableChart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Datatype returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.DATATYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Title returns Title
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.TITLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.TITLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Tuple1
	 *     Tuple returns Tuple1
	 *     Tuple1 returns Tuple1
	 *
	 * Constraint:
	 *     (name=ID url=URL value1=Text value2=Number)
	 */
	protected void sequence_Tuple1(ISerializationContext context, Tuple1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.TUPLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.TUPLE__NAME));
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.TUPLE__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.TUPLE__URL));
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.TUPLE1__VALUE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.TUPLE1__VALUE1));
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.TUPLE1__VALUE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.TUPLE1__VALUE2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTuple1Access().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTuple1Access().getUrlURLParserRuleCall_3_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getTuple1Access().getValue1TextParserRuleCall_4_0(), semanticObject.getValue1());
		feeder.accept(grammarAccess.getTuple1Access().getValue2NumberParserRuleCall_5_0(), semanticObject.getValue2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Tuple2
	 *     Tuple returns Tuple2
	 *     Tuple2 returns Tuple2
	 *
	 * Constraint:
	 *     (name=ID url=URL (value1=Text | value1=Number) value2+=Number+)
	 */
	protected void sequence_Tuple2(ISerializationContext context, Tuple2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Tuple3
	 *     Tuple returns Tuple3
	 *     Tuple3 returns Tuple3
	 *
	 * Constraint:
	 *     (name=ID url=URL value1=Float value2=Float (value3=Text | value3=Number))
	 */
	protected void sequence_Tuple3(ISerializationContext context, Tuple3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Tuple4
	 *     Tuple returns Tuple4
	 *     Tuple4 returns Tuple4
	 *
	 * Constraint:
	 *     (name=ID url=URL values+=Datatype+)
	 */
	protected void sequence_Tuple4(ISerializationContext context, Tuple4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URL returns URL
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_URL(ISerializationContext context, URL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.URL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.URL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURLAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ZoomLevel returns ZoomLevel
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_ZoomLevel(ISerializationContext context, ZoomLevel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LenguajegraficoPackage.Literals.ZOOM_LEVEL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LenguajegraficoPackage.Literals.ZOOM_LEVEL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZoomLevelAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
