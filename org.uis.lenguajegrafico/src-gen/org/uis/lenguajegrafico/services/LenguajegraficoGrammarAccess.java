/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.uis.lenguajegrafico.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LenguajegraficoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LenguajegraficoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Lenguajegrafico");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Lenguajegrafico:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDashBoardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigurationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	Chart | Tuple | DashBoard | Configuration;
		@Override public ParserRule getRule() { return rule; }
		
		//Chart | Tuple | DashBoard | Configuration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Chart
		public RuleCall getChartParserRuleCall_0() { return cChartParserRuleCall_0; }
		
		//Tuple
		public RuleCall getTupleParserRuleCall_1() { return cTupleParserRuleCall_1; }
		
		//DashBoard
		public RuleCall getDashBoardParserRuleCall_2() { return cDashBoardParserRuleCall_2; }
		
		//Configuration
		public RuleCall getConfigurationParserRuleCall_3() { return cConfigurationParserRuleCall_3; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Datatype:
		//	Text | Number | Float;
		@Override public ParserRule getRule() { return rule; }
		
		//Text | Number | Float
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Text
		public RuleCall getTextParserRuleCall_0() { return cTextParserRuleCall_0; }
		
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
		
		//Float
		public RuleCall getFloatParserRuleCall_2() { return cFloatParserRuleCall_2; }
	}
	public class ChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Chart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPieChartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLineChartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBarChartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMapChartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTableChartParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Chart:
		//	PieChart | LineChart | BarChart | MapChart | TableChart;
		@Override public ParserRule getRule() { return rule; }
		
		//PieChart | LineChart | BarChart | MapChart | TableChart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PieChart
		public RuleCall getPieChartParserRuleCall_0() { return cPieChartParserRuleCall_0; }
		
		//LineChart
		public RuleCall getLineChartParserRuleCall_1() { return cLineChartParserRuleCall_1; }
		
		//BarChart
		public RuleCall getBarChartParserRuleCall_2() { return cBarChartParserRuleCall_2; }
		
		//MapChart
		public RuleCall getMapChartParserRuleCall_3() { return cMapChartParserRuleCall_3; }
		
		//TableChart
		public RuleCall getTableChartParserRuleCall_4() { return cTableChartParserRuleCall_4; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Tuple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTuple1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTuple2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTuple3ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTuple4ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Tuple:
		//	Tuple1 | Tuple2 | Tuple3 | Tuple4;
		@Override public ParserRule getRule() { return rule; }
		
		//Tuple1 | Tuple2 | Tuple3 | Tuple4
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tuple1
		public RuleCall getTuple1ParserRuleCall_0() { return cTuple1ParserRuleCall_0; }
		
		//Tuple2
		public RuleCall getTuple2ParserRuleCall_1() { return cTuple2ParserRuleCall_1; }
		
		//Tuple3
		public RuleCall getTuple3ParserRuleCall_2() { return cTuple3ParserRuleCall_2; }
		
		//Tuple4
		public RuleCall getTuple4ParserRuleCall_3() { return cTuple4ParserRuleCall_3; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////Data type
		//Text:
		//	'String' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'String' name=ID
		public Group getGroup() { return cGroup; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Number:
		//	'Number' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Number' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Number'
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Float:
		//	'Float' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Float' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Float'
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cURLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////Data Configuration
		//URL:
		//	'URL' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'URL' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'URL'
		public Keyword getURLKeyword_0() { return cURLKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////Visual Features
		//Title:
		//	'Title' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Title' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'Title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class LabelxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Labelx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabel_xKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Labelx:
		//	'Label_x' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Label_x' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'Label_x'
		public Keyword getLabel_xKeyword_0() { return cLabel_xKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class LabelyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Labely");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabel_yKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Labely:
		//	'Label_y' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Label_y' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'Label_y'
		public Keyword getLabel_yKeyword_0() { return cLabel_yKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class LegendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Legend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLegendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//Legend:
		//	'Legend' '.' value=('True' | 'False');
		@Override public ParserRule getRule() { return rule; }
		
		//'Legend' '.' value=('True' | 'False')
		public Group getGroup() { return cGroup; }
		
		//'Legend'
		public Keyword getLegendKeyword_0() { return cLegendKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('True' | 'False')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('True' | 'False')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'True'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'False'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class HoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Hole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//Hole:
		//	'Hole' '.' value=('True' | 'False');
		@Override public ParserRule getRule() { return rule; }
		
		//'Hole' '.' value=('True' | 'False')
		public Group getGroup() { return cGroup; }
		
		//'Hole'
		public Keyword getHoleKeyword_0() { return cHoleKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('True' | 'False')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('True' | 'False')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'True'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'False'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class OrientationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Orientation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrientationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueHorizontalKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueVerticalKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//Orientation:
		//	'Orientation' '.' value=('Horizontal' | 'Vertical');
		@Override public ParserRule getRule() { return rule; }
		
		//'Orientation' '.' value=('Horizontal' | 'Vertical')
		public Group getGroup() { return cGroup; }
		
		//'Orientation'
		public Keyword getOrientationKeyword_0() { return cOrientationKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('Horizontal' | 'Vertical')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('Horizontal' | 'Vertical')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'Horizontal'
		public Keyword getValueHorizontalKeyword_2_0_0() { return cValueHorizontalKeyword_2_0_0; }
		
		//'Vertical'
		public Keyword getValueVerticalKeyword_2_0_1() { return cValueVerticalKeyword_2_0_1; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAreaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//Area:
		//	'Area' '.' value=('True' | 'False');
		@Override public ParserRule getRule() { return rule; }
		
		//'Area' '.' value=('True' | 'False')
		public Group getGroup() { return cGroup; }
		
		//'Area'
		public Keyword getAreaKeyword_0() { return cAreaKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('True' | 'False')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('True' | 'False')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'True'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'False'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class ZoomLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.ZoomLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZoomLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ZoomLevel:
		//	'ZoomLevel' '=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'ZoomLevel' '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//'ZoomLevel'
		public Keyword getZoomLevelKeyword_0() { return cZoomLevelKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class MakerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.MakerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMakerTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueNormalKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueGroupKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueMagnitudeCircleKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		
		//MakerType:
		//	'MakerType' '.' value=('Normal' | 'Group' | 'MagnitudeCircle');
		@Override public ParserRule getRule() { return rule; }
		
		//'MakerType' '.' value=('Normal' | 'Group' | 'MagnitudeCircle')
		public Group getGroup() { return cGroup; }
		
		//'MakerType'
		public Keyword getMakerTypeKeyword_0() { return cMakerTypeKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('Normal' | 'Group' | 'MagnitudeCircle')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('Normal' | 'Group' | 'MagnitudeCircle')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'Normal'
		public Keyword getValueNormalKeyword_2_0_0() { return cValueNormalKeyword_2_0_0; }
		
		//'Group'
		public Keyword getValueGroupKeyword_2_0_1() { return cValueGroupKeyword_2_0_1; }
		
		//'MagnitudeCircle'
		public Keyword getValueMagnitudeCircleKeyword_2_0_2() { return cValueMagnitudeCircleKeyword_2_0_2; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueGeneralKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueRoadmapKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueTerrainKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		private final Keyword cValueSatelliteKeyword_2_0_3 = (Keyword)cValueAlternatives_2_0.eContents().get(3);
		private final Keyword cValueHybridKeyword_2_0_4 = (Keyword)cValueAlternatives_2_0.eContents().get(4);
		
		//MapType:
		//	'MapType' '.' value=('general' | 'roadmap' | 'terrain' | 'satellite' | 'hybrid');
		@Override public ParserRule getRule() { return rule; }
		
		//'MapType' '.' value=('general' | 'roadmap' | 'terrain' | 'satellite' | 'hybrid')
		public Group getGroup() { return cGroup; }
		
		//'MapType'
		public Keyword getMapTypeKeyword_0() { return cMapTypeKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('general' | 'roadmap' | 'terrain' | 'satellite' | 'hybrid')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('general' | 'roadmap' | 'terrain' | 'satellite' | 'hybrid')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'general'
		public Keyword getValueGeneralKeyword_2_0_0() { return cValueGeneralKeyword_2_0_0; }
		
		//'roadmap'
		public Keyword getValueRoadmapKeyword_2_0_1() { return cValueRoadmapKeyword_2_0_1; }
		
		//'terrain'
		public Keyword getValueTerrainKeyword_2_0_2() { return cValueTerrainKeyword_2_0_2; }
		
		//'satellite'
		public Keyword getValueSatelliteKeyword_2_0_3() { return cValueSatelliteKeyword_2_0_3; }
		
		//'hybrid'
		public Keyword getValueHybridKeyword_2_0_4() { return cValueHybridKeyword_2_0_4; }
	}
	public class CellSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.CellSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValue1x1Keyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValue1x2Keyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValue1x3Keyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		private final Keyword cValue2x1Keyword_2_0_3 = (Keyword)cValueAlternatives_2_0.eContents().get(3);
		private final Keyword cValue2x2Keyword_2_0_4 = (Keyword)cValueAlternatives_2_0.eContents().get(4);
		private final Keyword cValue3x3Keyword_2_0_5 = (Keyword)cValueAlternatives_2_0.eContents().get(5);
		
		//CellSize:
		//	'CellSize' '.' value=('1x1' | '1x2' | '1x3' | '2x1' | '2x2' | '3x3');
		@Override public ParserRule getRule() { return rule; }
		
		//'CellSize' '.' value=('1x1' | '1x2' | '1x3' | '2x1' | '2x2' | '3x3')
		public Group getGroup() { return cGroup; }
		
		//'CellSize'
		public Keyword getCellSizeKeyword_0() { return cCellSizeKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('1x1' | '1x2' | '1x3' | '2x1' | '2x2' | '3x3')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('1x1' | '1x2' | '1x3' | '2x1' | '2x2' | '3x3')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'1x1'
		public Keyword getValue1x1Keyword_2_0_0() { return cValue1x1Keyword_2_0_0; }
		
		//'1x2'
		public Keyword getValue1x2Keyword_2_0_1() { return cValue1x2Keyword_2_0_1; }
		
		//'1x3'
		public Keyword getValue1x3Keyword_2_0_2() { return cValue1x3Keyword_2_0_2; }
		
		//'2x1'
		public Keyword getValue2x1Keyword_2_0_3() { return cValue2x1Keyword_2_0_3; }
		
		//'2x2'
		public Keyword getValue2x2Keyword_2_0_4() { return cValue2x2Keyword_2_0_4; }
		
		//'3x3'
		public Keyword getValue3x3Keyword_2_0_5() { return cValue3x3Keyword_2_0_5; }
	}
	public class PieChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.PieChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPieChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTupleTuple1CrossReference_3_0 = (CrossReference)cTupleAssignment_3.eContents().get(0);
		private final RuleCall cTupleTuple1IDTerminalRuleCall_3_0_1 = (RuleCall)cTupleTuple1CrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFeaturesAlternatives_4_0 = (Alternatives)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0_0 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(0);
		private final RuleCall cFeaturesLegendParserRuleCall_4_0_1 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(1);
		private final RuleCall cFeaturesHoleParserRuleCall_4_0_2 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(2);
		private final RuleCall cFeaturesCellSizeParserRuleCall_4_0_3 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Charts Available
		//PieChart:
		//	'PieChart' name=ID '{'
		//	tuple=[Tuple1] features+=(Title | Legend | Hole | CellSize)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PieChart' name=ID '{' tuple=[Tuple1] features+=(Title | Legend | Hole | CellSize)* '}'
		public Group getGroup() { return cGroup; }
		
		//'PieChart'
		public Keyword getPieChartKeyword_0() { return cPieChartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tuple=[Tuple1]
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//[Tuple1]
		public CrossReference getTupleTuple1CrossReference_3_0() { return cTupleTuple1CrossReference_3_0; }
		
		//ID
		public RuleCall getTupleTuple1IDTerminalRuleCall_3_0_1() { return cTupleTuple1IDTerminalRuleCall_3_0_1; }
		
		//features+=(Title | Legend | Hole | CellSize)*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//(Title | Legend | Hole | CellSize)
		public Alternatives getFeaturesAlternatives_4_0() { return cFeaturesAlternatives_4_0; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0_0() { return cFeaturesTitleParserRuleCall_4_0_0; }
		
		//Legend
		public RuleCall getFeaturesLegendParserRuleCall_4_0_1() { return cFeaturesLegendParserRuleCall_4_0_1; }
		
		//Hole
		public RuleCall getFeaturesHoleParserRuleCall_4_0_2() { return cFeaturesHoleParserRuleCall_4_0_2; }
		
		//CellSize
		public RuleCall getFeaturesCellSizeParserRuleCall_4_0_3() { return cFeaturesCellSizeParserRuleCall_4_0_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BarChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.BarChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBarChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTupleTuple2CrossReference_3_0 = (CrossReference)cTupleAssignment_3.eContents().get(0);
		private final RuleCall cTupleTuple2IDTerminalRuleCall_3_0_1 = (RuleCall)cTupleTuple2CrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFeaturesAlternatives_4_0 = (Alternatives)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0_0 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(0);
		private final RuleCall cFeaturesLegendParserRuleCall_4_0_1 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(1);
		private final RuleCall cFeaturesLabelxParserRuleCall_4_0_2 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(2);
		private final RuleCall cFeaturesLabelyParserRuleCall_4_0_3 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(3);
		private final RuleCall cFeaturesOrientationParserRuleCall_4_0_4 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(4);
		private final RuleCall cFeaturesCellSizeParserRuleCall_4_0_5 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BarChart:
		//	'BarChart' name=ID '{'
		//	tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Orientation | CellSize)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BarChart' name=ID '{' tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Orientation | CellSize)* '}'
		public Group getGroup() { return cGroup; }
		
		//'BarChart'
		public Keyword getBarChartKeyword_0() { return cBarChartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tuple=[Tuple2]
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//[Tuple2]
		public CrossReference getTupleTuple2CrossReference_3_0() { return cTupleTuple2CrossReference_3_0; }
		
		//ID
		public RuleCall getTupleTuple2IDTerminalRuleCall_3_0_1() { return cTupleTuple2IDTerminalRuleCall_3_0_1; }
		
		//features+=(Title | Legend | Labelx | Labely | Orientation | CellSize)*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//(Title | Legend | Labelx | Labely | Orientation | CellSize)
		public Alternatives getFeaturesAlternatives_4_0() { return cFeaturesAlternatives_4_0; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0_0() { return cFeaturesTitleParserRuleCall_4_0_0; }
		
		//Legend
		public RuleCall getFeaturesLegendParserRuleCall_4_0_1() { return cFeaturesLegendParserRuleCall_4_0_1; }
		
		//Labelx
		public RuleCall getFeaturesLabelxParserRuleCall_4_0_2() { return cFeaturesLabelxParserRuleCall_4_0_2; }
		
		//Labely
		public RuleCall getFeaturesLabelyParserRuleCall_4_0_3() { return cFeaturesLabelyParserRuleCall_4_0_3; }
		
		//Orientation
		public RuleCall getFeaturesOrientationParserRuleCall_4_0_4() { return cFeaturesOrientationParserRuleCall_4_0_4; }
		
		//CellSize
		public RuleCall getFeaturesCellSizeParserRuleCall_4_0_5() { return cFeaturesCellSizeParserRuleCall_4_0_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LineChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.LineChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTupleTuple2CrossReference_3_0 = (CrossReference)cTupleAssignment_3.eContents().get(0);
		private final RuleCall cTupleTuple2IDTerminalRuleCall_3_0_1 = (RuleCall)cTupleTuple2CrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFeaturesAlternatives_4_0 = (Alternatives)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0_0 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(0);
		private final RuleCall cFeaturesLegendParserRuleCall_4_0_1 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(1);
		private final RuleCall cFeaturesLabelxParserRuleCall_4_0_2 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(2);
		private final RuleCall cFeaturesLabelyParserRuleCall_4_0_3 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(3);
		private final RuleCall cFeaturesAreaParserRuleCall_4_0_4 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(4);
		private final RuleCall cFeaturesCellSizeParserRuleCall_4_0_5 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LineChart:
		//	'LineChart' name=ID '{'
		//	tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Area | CellSize)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LineChart' name=ID '{' tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Area | CellSize)* '}'
		public Group getGroup() { return cGroup; }
		
		//'LineChart'
		public Keyword getLineChartKeyword_0() { return cLineChartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tuple=[Tuple2]
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//[Tuple2]
		public CrossReference getTupleTuple2CrossReference_3_0() { return cTupleTuple2CrossReference_3_0; }
		
		//ID
		public RuleCall getTupleTuple2IDTerminalRuleCall_3_0_1() { return cTupleTuple2IDTerminalRuleCall_3_0_1; }
		
		//features+=(Title | Legend | Labelx | Labely | Area | CellSize)*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//(Title | Legend | Labelx | Labely | Area | CellSize)
		public Alternatives getFeaturesAlternatives_4_0() { return cFeaturesAlternatives_4_0; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0_0() { return cFeaturesTitleParserRuleCall_4_0_0; }
		
		//Legend
		public RuleCall getFeaturesLegendParserRuleCall_4_0_1() { return cFeaturesLegendParserRuleCall_4_0_1; }
		
		//Labelx
		public RuleCall getFeaturesLabelxParserRuleCall_4_0_2() { return cFeaturesLabelxParserRuleCall_4_0_2; }
		
		//Labely
		public RuleCall getFeaturesLabelyParserRuleCall_4_0_3() { return cFeaturesLabelyParserRuleCall_4_0_3; }
		
		//Area
		public RuleCall getFeaturesAreaParserRuleCall_4_0_4() { return cFeaturesAreaParserRuleCall_4_0_4; }
		
		//CellSize
		public RuleCall getFeaturesCellSizeParserRuleCall_4_0_5() { return cFeaturesCellSizeParserRuleCall_4_0_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MapChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.MapChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTupleTuple3CrossReference_3_0 = (CrossReference)cTupleAssignment_3.eContents().get(0);
		private final RuleCall cTupleTuple3IDTerminalRuleCall_3_0_1 = (RuleCall)cTupleTuple3CrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFeaturesAlternatives_4_0 = (Alternatives)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0_0 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(0);
		private final RuleCall cFeaturesZoomLevelParserRuleCall_4_0_1 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(1);
		private final RuleCall cFeaturesMakerTypeParserRuleCall_4_0_2 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(2);
		private final RuleCall cFeaturesMapTypeParserRuleCall_4_0_3 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(3);
		private final RuleCall cFeaturesCellSizeParserRuleCall_4_0_4 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapChart:
		//	'MapChart' name=ID '{'
		//	tuple=[Tuple3] features+=(Title | ZoomLevel | MakerType | MapType | CellSize)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MapChart' name=ID '{' tuple=[Tuple3] features+=(Title | ZoomLevel | MakerType | MapType | CellSize)* '}'
		public Group getGroup() { return cGroup; }
		
		//'MapChart'
		public Keyword getMapChartKeyword_0() { return cMapChartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tuple=[Tuple3]
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//[Tuple3]
		public CrossReference getTupleTuple3CrossReference_3_0() { return cTupleTuple3CrossReference_3_0; }
		
		//ID
		public RuleCall getTupleTuple3IDTerminalRuleCall_3_0_1() { return cTupleTuple3IDTerminalRuleCall_3_0_1; }
		
		//features+=(Title | ZoomLevel | MakerType | MapType | CellSize)*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//(Title | ZoomLevel | MakerType | MapType | CellSize)
		public Alternatives getFeaturesAlternatives_4_0() { return cFeaturesAlternatives_4_0; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0_0() { return cFeaturesTitleParserRuleCall_4_0_0; }
		
		//ZoomLevel
		public RuleCall getFeaturesZoomLevelParserRuleCall_4_0_1() { return cFeaturesZoomLevelParserRuleCall_4_0_1; }
		
		//MakerType
		public RuleCall getFeaturesMakerTypeParserRuleCall_4_0_2() { return cFeaturesMakerTypeParserRuleCall_4_0_2; }
		
		//MapType
		public RuleCall getFeaturesMapTypeParserRuleCall_4_0_3() { return cFeaturesMapTypeParserRuleCall_4_0_3; }
		
		//CellSize
		public RuleCall getFeaturesCellSizeParserRuleCall_4_0_4() { return cFeaturesCellSizeParserRuleCall_4_0_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TableChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.TableChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTupleTuple4CrossReference_3_0 = (CrossReference)cTupleAssignment_3.eContents().get(0);
		private final RuleCall cTupleTuple4IDTerminalRuleCall_3_0_1 = (RuleCall)cTupleTuple4CrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cFeaturesAlternatives_4_0 = (Alternatives)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0_0 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(0);
		private final RuleCall cFeaturesCellSizeParserRuleCall_4_0_1 = (RuleCall)cFeaturesAlternatives_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TableChart:
		//	'TableChart' name=ID '{'
		//	tuple=[Tuple4] features+=(Title | CellSize)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TableChart' name=ID '{' tuple=[Tuple4] features+=(Title | CellSize)* '}'
		public Group getGroup() { return cGroup; }
		
		//'TableChart'
		public Keyword getTableChartKeyword_0() { return cTableChartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tuple=[Tuple4]
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//[Tuple4]
		public CrossReference getTupleTuple4CrossReference_3_0() { return cTupleTuple4CrossReference_3_0; }
		
		//ID
		public RuleCall getTupleTuple4IDTerminalRuleCall_3_0_1() { return cTupleTuple4IDTerminalRuleCall_3_0_1; }
		
		//features+=(Title | CellSize)*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//(Title | CellSize)
		public Alternatives getFeaturesAlternatives_4_0() { return cFeaturesAlternatives_4_0; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0_0() { return cFeaturesTitleParserRuleCall_4_0_0; }
		
		//CellSize
		public RuleCall getFeaturesCellSizeParserRuleCall_4_0_1() { return cFeaturesCellSizeParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DashBoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.DashBoard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDashBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cChartsChartCrossReference_3_0 = (CrossReference)cChartsAssignment_3.eContents().get(0);
		private final RuleCall cChartsChartIDTerminalRuleCall_3_0_1 = (RuleCall)cChartsChartCrossReference_3_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesTitleParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DashBoard:
		//	'DashBoard' name=ID '{'
		//	charts+=[Chart]+
		//	features+=Title*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DashBoard' name=ID '{' charts+=[Chart]+ features+=Title* '}'
		public Group getGroup() { return cGroup; }
		
		//'DashBoard'
		public Keyword getDashBoardKeyword_0() { return cDashBoardKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//charts+=[Chart]+
		public Assignment getChartsAssignment_3() { return cChartsAssignment_3; }
		
		//[Chart]
		public CrossReference getChartsChartCrossReference_3_0() { return cChartsChartCrossReference_3_0; }
		
		//ID
		public RuleCall getChartsChartIDTerminalRuleCall_3_0_1() { return cChartsChartIDTerminalRuleCall_3_0_1; }
		
		//features+=Title*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Title
		public RuleCall getFeaturesTitleParserRuleCall_4_0() { return cFeaturesTitleParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Tuple1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Tuple1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTuple1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlURLParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue1TextParserRuleCall_4_0 = (RuleCall)cValue1Assignment_4.eContents().get(0);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2NumberParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Tuples Availables
		//Tuple1:
		//	'Tuple1' name=ID '{'
		//	url=URL value1=Text value2=Number '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple1' name=ID '{' url=URL value1=Text value2=Number '}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple1'
		public Keyword getTuple1Keyword_0() { return cTuple1Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//url=URL
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_3_0() { return cUrlURLParserRuleCall_3_0; }
		
		//value1=Text
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }
		
		//Text
		public RuleCall getValue1TextParserRuleCall_4_0() { return cValue1TextParserRuleCall_4_0; }
		
		////Etiqueta | Label
		//value2=Number
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//Number
		public RuleCall getValue2NumberParserRuleCall_5_0() { return cValue2NumberParserRuleCall_5_0; }
		
		////Valor | Value
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class Tuple2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Tuple2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTuple2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlURLParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cValue1Alternatives_4_0 = (Alternatives)cValue1Assignment_4.eContents().get(0);
		private final RuleCall cValue1TextParserRuleCall_4_0_0 = (RuleCall)cValue1Alternatives_4_0.eContents().get(0);
		private final RuleCall cValue1NumberParserRuleCall_4_0_1 = (RuleCall)cValue1Alternatives_4_0.eContents().get(1);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2NumberParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Tuple2:
		//	'Tuple2' name=ID '{'
		//	url=URL value1=(Text | Number) value2+=Number+ //Valor | Value
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple2' name=ID '{' url=URL value1=(Text | Number) value2+=Number+ //Valor | Value
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple2'
		public Keyword getTuple2Keyword_0() { return cTuple2Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//url=URL
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_3_0() { return cUrlURLParserRuleCall_3_0; }
		
		//value1=(Text | Number)
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }
		
		//(Text | Number)
		public Alternatives getValue1Alternatives_4_0() { return cValue1Alternatives_4_0; }
		
		//Text
		public RuleCall getValue1TextParserRuleCall_4_0_0() { return cValue1TextParserRuleCall_4_0_0; }
		
		//Number
		public RuleCall getValue1NumberParserRuleCall_4_0_1() { return cValue1NumberParserRuleCall_4_0_1; }
		
		////Etiqueta | Label
		//value2+=Number+
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//Number
		public RuleCall getValue2NumberParserRuleCall_5_0() { return cValue2NumberParserRuleCall_5_0; }
		
		////Valor | Value
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class Tuple3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Tuple3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTuple3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlURLParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue1FloatParserRuleCall_4_0 = (RuleCall)cValue1Assignment_4.eContents().get(0);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2FloatParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Assignment cValue3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cValue3Alternatives_6_0 = (Alternatives)cValue3Assignment_6.eContents().get(0);
		private final RuleCall cValue3TextParserRuleCall_6_0_0 = (RuleCall)cValue3Alternatives_6_0.eContents().get(0);
		private final RuleCall cValue3NumberParserRuleCall_6_0_1 = (RuleCall)cValue3Alternatives_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Tuple3:
		//	'Tuple3' name=ID '{'
		//	url=URL value1=Float value2=Float value3=(Text | Number) //Etiqueta | Label
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple3' name=ID '{' url=URL value1=Float value2=Float value3=(Text | Number) //Etiqueta | Label
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple3'
		public Keyword getTuple3Keyword_0() { return cTuple3Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//url=URL
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_3_0() { return cUrlURLParserRuleCall_3_0; }
		
		//value1=Float
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }
		
		//Float
		public RuleCall getValue1FloatParserRuleCall_4_0() { return cValue1FloatParserRuleCall_4_0; }
		
		////Latitud | Latitude
		//value2=Float
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//Float
		public RuleCall getValue2FloatParserRuleCall_5_0() { return cValue2FloatParserRuleCall_5_0; }
		
		////Longitud | Longitude
		//value3=(Text | Number)
		public Assignment getValue3Assignment_6() { return cValue3Assignment_6; }
		
		//(Text | Number)
		public Alternatives getValue3Alternatives_6_0() { return cValue3Alternatives_6_0; }
		
		//Text
		public RuleCall getValue3TextParserRuleCall_6_0_0() { return cValue3TextParserRuleCall_6_0_0; }
		
		//Number
		public RuleCall getValue3NumberParserRuleCall_6_0_1() { return cValue3NumberParserRuleCall_6_0_1; }
		
		////Etiqueta | Label
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class Tuple4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Tuple4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTuple4Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlURLParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesDatatypeParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Tuple4:
		//	'Tuple4' name=ID '{'
		//	url=URL values+=Datatype+ // Column
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple4' name=ID '{' url=URL values+=Datatype+ // Column
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple4'
		public Keyword getTuple4Keyword_0() { return cTuple4Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//url=URL
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//URL
		public RuleCall getUrlURLParserRuleCall_3_0() { return cUrlURLParserRuleCall_3_0; }
		
		//values+=Datatype+
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//Datatype
		public RuleCall getValuesDatatypeParserRuleCall_4_0() { return cValuesDatatypeParserRuleCall_4_0; }
		
		//// Column
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.Configuration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeGeneratedTargetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNormaliceDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Configuration Options
		//Configuration:
		//	CodeGeneratedTarget | NormaliceData;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeGeneratedTarget | NormaliceData
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeGeneratedTarget
		public RuleCall getCodeGeneratedTargetParserRuleCall_0() { return cCodeGeneratedTargetParserRuleCall_0; }
		
		//NormaliceData
		public RuleCall getNormaliceDataParserRuleCall_1() { return cNormaliceDataParserRuleCall_1; }
	}
	public class CodeGeneratedTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.CodeGeneratedTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodeGeneratedTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueAllKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueWebKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValuePythonKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		
		//CodeGeneratedTarget:
		//	'CodeGeneratedTarget' '.' value=('All' | 'Web' | 'Python');
		@Override public ParserRule getRule() { return rule; }
		
		//'CodeGeneratedTarget' '.' value=('All' | 'Web' | 'Python')
		public Group getGroup() { return cGroup; }
		
		//'CodeGeneratedTarget'
		public Keyword getCodeGeneratedTargetKeyword_0() { return cCodeGeneratedTargetKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('All' | 'Web' | 'Python')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('All' | 'Web' | 'Python')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'All'
		public Keyword getValueAllKeyword_2_0_0() { return cValueAllKeyword_2_0_0; }
		
		//'Web'
		public Keyword getValueWebKeyword_2_0_1() { return cValueWebKeyword_2_0_1; }
		
		//'Python'
		public Keyword getValuePythonKeyword_2_0_2() { return cValuePythonKeyword_2_0_2; }
	}
	public class NormaliceDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uis.lenguajegrafico.Lenguajegrafico.NormaliceData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNormaliceDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//NormaliceData:
		//	'NormaliceData' '.' value=('True' | 'False');
		@Override public ParserRule getRule() { return rule; }
		
		//'NormaliceData' '.' value=('True' | 'False')
		public Group getGroup() { return cGroup; }
		
		//'NormaliceData'
		public Keyword getNormaliceDataKeyword_0() { return cNormaliceDataKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=('True' | 'False')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('True' | 'False')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'True'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'False'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	
	
	private final LenguajegraficoElements pLenguajegrafico;
	private final ElementElements pElement;
	private final DatatypeElements pDatatype;
	private final ChartElements pChart;
	private final TupleElements pTuple;
	private final TextElements pText;
	private final NumberElements pNumber;
	private final FloatElements pFloat;
	private final URLElements pURL;
	private final TitleElements pTitle;
	private final LabelxElements pLabelx;
	private final LabelyElements pLabely;
	private final LegendElements pLegend;
	private final HoleElements pHole;
	private final OrientationElements pOrientation;
	private final AreaElements pArea;
	private final ZoomLevelElements pZoomLevel;
	private final MakerTypeElements pMakerType;
	private final MapTypeElements pMapType;
	private final CellSizeElements pCellSize;
	private final PieChartElements pPieChart;
	private final BarChartElements pBarChart;
	private final LineChartElements pLineChart;
	private final MapChartElements pMapChart;
	private final TableChartElements pTableChart;
	private final DashBoardElements pDashBoard;
	private final Tuple1Elements pTuple1;
	private final Tuple2Elements pTuple2;
	private final Tuple3Elements pTuple3;
	private final Tuple4Elements pTuple4;
	private final ConfigurationElements pConfiguration;
	private final CodeGeneratedTargetElements pCodeGeneratedTarget;
	private final NormaliceDataElements pNormaliceData;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LenguajegraficoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLenguajegrafico = new LenguajegraficoElements();
		this.pElement = new ElementElements();
		this.pDatatype = new DatatypeElements();
		this.pChart = new ChartElements();
		this.pTuple = new TupleElements();
		this.pText = new TextElements();
		this.pNumber = new NumberElements();
		this.pFloat = new FloatElements();
		this.pURL = new URLElements();
		this.pTitle = new TitleElements();
		this.pLabelx = new LabelxElements();
		this.pLabely = new LabelyElements();
		this.pLegend = new LegendElements();
		this.pHole = new HoleElements();
		this.pOrientation = new OrientationElements();
		this.pArea = new AreaElements();
		this.pZoomLevel = new ZoomLevelElements();
		this.pMakerType = new MakerTypeElements();
		this.pMapType = new MapTypeElements();
		this.pCellSize = new CellSizeElements();
		this.pPieChart = new PieChartElements();
		this.pBarChart = new BarChartElements();
		this.pLineChart = new LineChartElements();
		this.pMapChart = new MapChartElements();
		this.pTableChart = new TableChartElements();
		this.pDashBoard = new DashBoardElements();
		this.pTuple1 = new Tuple1Elements();
		this.pTuple2 = new Tuple2Elements();
		this.pTuple3 = new Tuple3Elements();
		this.pTuple4 = new Tuple4Elements();
		this.pConfiguration = new ConfigurationElements();
		this.pCodeGeneratedTarget = new CodeGeneratedTargetElements();
		this.pNormaliceData = new NormaliceDataElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uis.lenguajegrafico.Lenguajegrafico".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lenguajegrafico:
	//	elements+=Element*;
	public LenguajegraficoElements getLenguajegraficoAccess() {
		return pLenguajegrafico;
	}
	
	public ParserRule getLenguajegraficoRule() {
		return getLenguajegraficoAccess().getRule();
	}
	
	//Element:
	//	Chart | Tuple | DashBoard | Configuration;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Datatype:
	//	Text | Number | Float;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//Chart:
	//	PieChart | LineChart | BarChart | MapChart | TableChart;
	public ChartElements getChartAccess() {
		return pChart;
	}
	
	public ParserRule getChartRule() {
		return getChartAccess().getRule();
	}
	
	//Tuple:
	//	Tuple1 | Tuple2 | Tuple3 | Tuple4;
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	////Data type
	//Text:
	//	'String' name=ID;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Number:
	//	'Number' name=ID;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Float:
	//	'Float' name=ID;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	////Data Configuration
	//URL:
	//	'URL' '=' value=STRING;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}
	
	////Visual Features
	//Title:
	//	'Title' '=' value=STRING;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Labelx:
	//	'Label_x' '=' value=STRING;
	public LabelxElements getLabelxAccess() {
		return pLabelx;
	}
	
	public ParserRule getLabelxRule() {
		return getLabelxAccess().getRule();
	}
	
	//Labely:
	//	'Label_y' '=' value=STRING;
	public LabelyElements getLabelyAccess() {
		return pLabely;
	}
	
	public ParserRule getLabelyRule() {
		return getLabelyAccess().getRule();
	}
	
	//Legend:
	//	'Legend' '.' value=('True' | 'False');
	public LegendElements getLegendAccess() {
		return pLegend;
	}
	
	public ParserRule getLegendRule() {
		return getLegendAccess().getRule();
	}
	
	//Hole:
	//	'Hole' '.' value=('True' | 'False');
	public HoleElements getHoleAccess() {
		return pHole;
	}
	
	public ParserRule getHoleRule() {
		return getHoleAccess().getRule();
	}
	
	//Orientation:
	//	'Orientation' '.' value=('Horizontal' | 'Vertical');
	public OrientationElements getOrientationAccess() {
		return pOrientation;
	}
	
	public ParserRule getOrientationRule() {
		return getOrientationAccess().getRule();
	}
	
	//Area:
	//	'Area' '.' value=('True' | 'False');
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//ZoomLevel:
	//	'ZoomLevel' '=' value=INT;
	public ZoomLevelElements getZoomLevelAccess() {
		return pZoomLevel;
	}
	
	public ParserRule getZoomLevelRule() {
		return getZoomLevelAccess().getRule();
	}
	
	//MakerType:
	//	'MakerType' '.' value=('Normal' | 'Group' | 'MagnitudeCircle');
	public MakerTypeElements getMakerTypeAccess() {
		return pMakerType;
	}
	
	public ParserRule getMakerTypeRule() {
		return getMakerTypeAccess().getRule();
	}
	
	//MapType:
	//	'MapType' '.' value=('general' | 'roadmap' | 'terrain' | 'satellite' | 'hybrid');
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//CellSize:
	//	'CellSize' '.' value=('1x1' | '1x2' | '1x3' | '2x1' | '2x2' | '3x3');
	public CellSizeElements getCellSizeAccess() {
		return pCellSize;
	}
	
	public ParserRule getCellSizeRule() {
		return getCellSizeAccess().getRule();
	}
	
	////Charts Available
	//PieChart:
	//	'PieChart' name=ID '{'
	//	tuple=[Tuple1] features+=(Title | Legend | Hole | CellSize)*
	//	'}';
	public PieChartElements getPieChartAccess() {
		return pPieChart;
	}
	
	public ParserRule getPieChartRule() {
		return getPieChartAccess().getRule();
	}
	
	//BarChart:
	//	'BarChart' name=ID '{'
	//	tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Orientation | CellSize)*
	//	'}';
	public BarChartElements getBarChartAccess() {
		return pBarChart;
	}
	
	public ParserRule getBarChartRule() {
		return getBarChartAccess().getRule();
	}
	
	//LineChart:
	//	'LineChart' name=ID '{'
	//	tuple=[Tuple2] features+=(Title | Legend | Labelx | Labely | Area | CellSize)*
	//	'}';
	public LineChartElements getLineChartAccess() {
		return pLineChart;
	}
	
	public ParserRule getLineChartRule() {
		return getLineChartAccess().getRule();
	}
	
	//MapChart:
	//	'MapChart' name=ID '{'
	//	tuple=[Tuple3] features+=(Title | ZoomLevel | MakerType | MapType | CellSize)*
	//	'}';
	public MapChartElements getMapChartAccess() {
		return pMapChart;
	}
	
	public ParserRule getMapChartRule() {
		return getMapChartAccess().getRule();
	}
	
	//TableChart:
	//	'TableChart' name=ID '{'
	//	tuple=[Tuple4] features+=(Title | CellSize)*
	//	'}';
	public TableChartElements getTableChartAccess() {
		return pTableChart;
	}
	
	public ParserRule getTableChartRule() {
		return getTableChartAccess().getRule();
	}
	
	//DashBoard:
	//	'DashBoard' name=ID '{'
	//	charts+=[Chart]+
	//	features+=Title*
	//	'}';
	public DashBoardElements getDashBoardAccess() {
		return pDashBoard;
	}
	
	public ParserRule getDashBoardRule() {
		return getDashBoardAccess().getRule();
	}
	
	////Tuples Availables
	//Tuple1:
	//	'Tuple1' name=ID '{'
	//	url=URL value1=Text value2=Number '}';
	public Tuple1Elements getTuple1Access() {
		return pTuple1;
	}
	
	public ParserRule getTuple1Rule() {
		return getTuple1Access().getRule();
	}
	
	//Tuple2:
	//	'Tuple2' name=ID '{'
	//	url=URL value1=(Text | Number) value2+=Number+ //Valor | Value
	//	'}';
	public Tuple2Elements getTuple2Access() {
		return pTuple2;
	}
	
	public ParserRule getTuple2Rule() {
		return getTuple2Access().getRule();
	}
	
	//Tuple3:
	//	'Tuple3' name=ID '{'
	//	url=URL value1=Float value2=Float value3=(Text | Number) //Etiqueta | Label
	//	'}';
	public Tuple3Elements getTuple3Access() {
		return pTuple3;
	}
	
	public ParserRule getTuple3Rule() {
		return getTuple3Access().getRule();
	}
	
	//Tuple4:
	//	'Tuple4' name=ID '{'
	//	url=URL values+=Datatype+ // Column
	//	'}';
	public Tuple4Elements getTuple4Access() {
		return pTuple4;
	}
	
	public ParserRule getTuple4Rule() {
		return getTuple4Access().getRule();
	}
	
	////Configuration Options
	//Configuration:
	//	CodeGeneratedTarget | NormaliceData;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//CodeGeneratedTarget:
	//	'CodeGeneratedTarget' '.' value=('All' | 'Web' | 'Python');
	public CodeGeneratedTargetElements getCodeGeneratedTargetAccess() {
		return pCodeGeneratedTarget;
	}
	
	public ParserRule getCodeGeneratedTargetRule() {
		return getCodeGeneratedTargetAccess().getRule();
	}
	
	//NormaliceData:
	//	'NormaliceData' '.' value=('True' | 'False');
	public NormaliceDataElements getNormaliceDataAccess() {
		return pNormaliceData;
	}
	
	public ParserRule getNormaliceDataRule() {
		return getNormaliceDataAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
