/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.uis.lenguajegrafico.lenguajegrafico.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.uis.lenguajegrafico.lenguajegrafico.Area;
import org.uis.lenguajegrafico.lenguajegrafico.BarChart;
import org.uis.lenguajegrafico.lenguajegrafico.CellSize;
import org.uis.lenguajegrafico.lenguajegrafico.Chart;
import org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget;
import org.uis.lenguajegrafico.lenguajegrafico.Configuration;
import org.uis.lenguajegrafico.lenguajegrafico.DashBoard;
import org.uis.lenguajegrafico.lenguajegrafico.Datatype;
import org.uis.lenguajegrafico.lenguajegrafico.Element;
import org.uis.lenguajegrafico.lenguajegrafico.Hole;
import org.uis.lenguajegrafico.lenguajegrafico.Labelx;
import org.uis.lenguajegrafico.lenguajegrafico.Labely;
import org.uis.lenguajegrafico.lenguajegrafico.Legend;
import org.uis.lenguajegrafico.lenguajegrafico.Lenguajegrafico;
import org.uis.lenguajegrafico.lenguajegrafico.LenguajegraficoPackage;
import org.uis.lenguajegrafico.lenguajegrafico.LineChart;
import org.uis.lenguajegrafico.lenguajegrafico.MakerType;
import org.uis.lenguajegrafico.lenguajegrafico.MapChart;
import org.uis.lenguajegrafico.lenguajegrafico.MapType;
import org.uis.lenguajegrafico.lenguajegrafico.NormaliceData;
import org.uis.lenguajegrafico.lenguajegrafico.Orientation;
import org.uis.lenguajegrafico.lenguajegrafico.PieChart;
import org.uis.lenguajegrafico.lenguajegrafico.TableChart;
import org.uis.lenguajegrafico.lenguajegrafico.Text;
import org.uis.lenguajegrafico.lenguajegrafico.Title;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple1;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple2;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple3;
import org.uis.lenguajegrafico.lenguajegrafico.Tuple4;
import org.uis.lenguajegrafico.lenguajegrafico.URL;
import org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.uis.lenguajegrafico.lenguajegrafico.LenguajegraficoPackage
 * @generated
 */
public class LenguajegraficoAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LenguajegraficoPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LenguajegraficoAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LenguajegraficoPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LenguajegraficoSwitch<Adapter> modelSwitch =
    new LenguajegraficoSwitch<Adapter>()
    {
      @Override
      public Adapter caseLenguajegrafico(Lenguajegrafico object)
      {
        return createLenguajegraficoAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseDatatype(Datatype object)
      {
        return createDatatypeAdapter();
      }
      @Override
      public Adapter caseChart(Chart object)
      {
        return createChartAdapter();
      }
      @Override
      public Adapter caseTuple(Tuple object)
      {
        return createTupleAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseNumber(org.uis.lenguajegrafico.lenguajegrafico.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseFloat(org.uis.lenguajegrafico.lenguajegrafico.Float object)
      {
        return createFloatAdapter();
      }
      @Override
      public Adapter caseURL(URL object)
      {
        return createURLAdapter();
      }
      @Override
      public Adapter caseTitle(Title object)
      {
        return createTitleAdapter();
      }
      @Override
      public Adapter caseLabelx(Labelx object)
      {
        return createLabelxAdapter();
      }
      @Override
      public Adapter caseLabely(Labely object)
      {
        return createLabelyAdapter();
      }
      @Override
      public Adapter caseLegend(Legend object)
      {
        return createLegendAdapter();
      }
      @Override
      public Adapter caseHole(Hole object)
      {
        return createHoleAdapter();
      }
      @Override
      public Adapter caseOrientation(Orientation object)
      {
        return createOrientationAdapter();
      }
      @Override
      public Adapter caseArea(Area object)
      {
        return createAreaAdapter();
      }
      @Override
      public Adapter caseZoomLevel(ZoomLevel object)
      {
        return createZoomLevelAdapter();
      }
      @Override
      public Adapter caseMakerType(MakerType object)
      {
        return createMakerTypeAdapter();
      }
      @Override
      public Adapter caseMapType(MapType object)
      {
        return createMapTypeAdapter();
      }
      @Override
      public Adapter caseCellSize(CellSize object)
      {
        return createCellSizeAdapter();
      }
      @Override
      public Adapter casePieChart(PieChart object)
      {
        return createPieChartAdapter();
      }
      @Override
      public Adapter caseBarChart(BarChart object)
      {
        return createBarChartAdapter();
      }
      @Override
      public Adapter caseLineChart(LineChart object)
      {
        return createLineChartAdapter();
      }
      @Override
      public Adapter caseMapChart(MapChart object)
      {
        return createMapChartAdapter();
      }
      @Override
      public Adapter caseTableChart(TableChart object)
      {
        return createTableChartAdapter();
      }
      @Override
      public Adapter caseDashBoard(DashBoard object)
      {
        return createDashBoardAdapter();
      }
      @Override
      public Adapter caseTuple1(Tuple1 object)
      {
        return createTuple1Adapter();
      }
      @Override
      public Adapter caseTuple2(Tuple2 object)
      {
        return createTuple2Adapter();
      }
      @Override
      public Adapter caseTuple3(Tuple3 object)
      {
        return createTuple3Adapter();
      }
      @Override
      public Adapter caseTuple4(Tuple4 object)
      {
        return createTuple4Adapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseCodeGeneratedTarget(CodeGeneratedTarget object)
      {
        return createCodeGeneratedTargetAdapter();
      }
      @Override
      public Adapter caseNormaliceData(NormaliceData object)
      {
        return createNormaliceDataAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Lenguajegrafico <em>Lenguajegrafico</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Lenguajegrafico
   * @generated
   */
  public Adapter createLenguajegraficoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Datatype <em>Datatype</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Datatype
   * @generated
   */
  public Adapter createDatatypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Chart <em>Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Chart
   * @generated
   */
  public Adapter createChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Tuple <em>Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Tuple
   * @generated
   */
  public Adapter createTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Float <em>Float</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Float
   * @generated
   */
  public Adapter createFloatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.URL <em>URL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.URL
   * @generated
   */
  public Adapter createURLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Title <em>Title</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Title
   * @generated
   */
  public Adapter createTitleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Labelx <em>Labelx</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Labelx
   * @generated
   */
  public Adapter createLabelxAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Labely <em>Labely</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Labely
   * @generated
   */
  public Adapter createLabelyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Legend <em>Legend</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Legend
   * @generated
   */
  public Adapter createLegendAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Hole <em>Hole</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Hole
   * @generated
   */
  public Adapter createHoleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Orientation <em>Orientation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Orientation
   * @generated
   */
  public Adapter createOrientationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Area <em>Area</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Area
   * @generated
   */
  public Adapter createAreaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel <em>Zoom Level</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel
   * @generated
   */
  public Adapter createZoomLevelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.MakerType <em>Maker Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.MakerType
   * @generated
   */
  public Adapter createMakerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.MapType <em>Map Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.MapType
   * @generated
   */
  public Adapter createMapTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.CellSize <em>Cell Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.CellSize
   * @generated
   */
  public Adapter createCellSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.PieChart <em>Pie Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.PieChart
   * @generated
   */
  public Adapter createPieChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.BarChart <em>Bar Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.BarChart
   * @generated
   */
  public Adapter createBarChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.LineChart <em>Line Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.LineChart
   * @generated
   */
  public Adapter createLineChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.MapChart <em>Map Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.MapChart
   * @generated
   */
  public Adapter createMapChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.TableChart <em>Table Chart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.TableChart
   * @generated
   */
  public Adapter createTableChartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.DashBoard <em>Dash Board</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.DashBoard
   * @generated
   */
  public Adapter createDashBoardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Tuple1 <em>Tuple1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Tuple1
   * @generated
   */
  public Adapter createTuple1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Tuple2 <em>Tuple2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Tuple2
   * @generated
   */
  public Adapter createTuple2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Tuple3 <em>Tuple3</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Tuple3
   * @generated
   */
  public Adapter createTuple3Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Tuple4 <em>Tuple4</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Tuple4
   * @generated
   */
  public Adapter createTuple4Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget <em>Code Generated Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget
   * @generated
   */
  public Adapter createCodeGeneratedTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.uis.lenguajegrafico.lenguajegrafico.NormaliceData <em>Normalice Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.uis.lenguajegrafico.lenguajegrafico.NormaliceData
   * @generated
   */
  public Adapter createNormaliceDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LenguajegraficoAdapterFactory
