/**
 * generated by Xtext 2.11.0
 */
package org.uis.lenguajegrafico.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.uis.lenguajegrafico.lenguajegrafico.Area;
import org.uis.lenguajegrafico.lenguajegrafico.BarChart;
import org.uis.lenguajegrafico.lenguajegrafico.CellSize;
import org.uis.lenguajegrafico.lenguajegrafico.Chart;
import org.uis.lenguajegrafico.lenguajegrafico.CodeGeneratedTarget;
import org.uis.lenguajegrafico.lenguajegrafico.DashBoard;
import org.uis.lenguajegrafico.lenguajegrafico.Datatype;
import org.uis.lenguajegrafico.lenguajegrafico.Hole;
import org.uis.lenguajegrafico.lenguajegrafico.Labelx;
import org.uis.lenguajegrafico.lenguajegrafico.Labely;
import org.uis.lenguajegrafico.lenguajegrafico.Legend;
import org.uis.lenguajegrafico.lenguajegrafico.LineChart;
import org.uis.lenguajegrafico.lenguajegrafico.MakerType;
import org.uis.lenguajegrafico.lenguajegrafico.MapChart;
import org.uis.lenguajegrafico.lenguajegrafico.MapType;
import org.uis.lenguajegrafico.lenguajegrafico.NormaliceData;
import org.uis.lenguajegrafico.lenguajegrafico.Orientation;
import org.uis.lenguajegrafico.lenguajegrafico.PieChart;
import org.uis.lenguajegrafico.lenguajegrafico.TableChart;
import org.uis.lenguajegrafico.lenguajegrafico.Text;
import org.uis.lenguajegrafico.lenguajegrafico.Title;
import org.uis.lenguajegrafico.lenguajegrafico.URL;
import org.uis.lenguajegrafico.lenguajegrafico.ZoomLevel;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LenguajegraficoGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private String Targuet = "All";
  
  private String Normalice = "True";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    int _size = IterableExtensions.size(Iterables.<CodeGeneratedTarget>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), CodeGeneratedTarget.class));
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      this.Targuet = ((CodeGeneratedTarget[])Conversions.unwrapArray(Iterables.<CodeGeneratedTarget>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), CodeGeneratedTarget.class), CodeGeneratedTarget.class))[0].getValue();
    }
    int _size_1 = IterableExtensions.size(Iterables.<NormaliceData>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), NormaliceData.class));
    boolean _notEquals_1 = (_size_1 != 0);
    if (_notEquals_1) {
      this.Normalice = ((NormaliceData[])Conversions.unwrapArray(Iterables.<NormaliceData>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), NormaliceData.class), NormaliceData.class))[0].getValue();
    }
    if ((Objects.equal(this.Targuet, "All") || Objects.equal(this.Targuet, "Web"))) {
      fsa.generateFile("/Web/js/properties.js", "");
    }
    Iterable<PieChart> _filter = Iterables.<PieChart>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PieChart.class);
    for (final PieChart e : _filter) {
      boolean _equals = Objects.equal(this.Targuet, "All");
      if (_equals) {
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
        String _plus = ("/Web/" + _string);
        String _plus_1 = (_plus + ".html");
        fsa.generateFile(_plus_1, 
          this.generateHTML(e));
        String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
        String _plus_2 = ("/Web/js/" + _string_1);
        String _plus_3 = (_plus_2 + ".js");
        fsa.generateFile(_plus_3, 
          this.generateJS(e));
        String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
        String _plus_4 = ("/python/" + _string_2);
        String _plus_5 = (_plus_4 + ".py");
        fsa.generateFile(_plus_5, 
          this.generatePy(e));
      } else {
        boolean _equals_1 = Objects.equal(this.Targuet, "Web");
        if (_equals_1) {
          String _string_3 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
          String _plus_6 = ("/Web/" + _string_3);
          String _plus_7 = (_plus_6 + ".html");
          fsa.generateFile(_plus_7, 
            this.generateHTML(e));
          String _string_4 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
          String _plus_8 = ("/Web/js/" + _string_4);
          String _plus_9 = (_plus_8 + ".js");
          fsa.generateFile(_plus_9, 
            this.generateJS(e));
        } else {
          String _string_5 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
          String _plus_10 = ("/python/" + _string_5);
          String _plus_11 = (_plus_10 + ".py");
          fsa.generateFile(_plus_11, 
            this.generatePy(e));
        }
      }
    }
    Iterable<BarChart> _filter_1 = Iterables.<BarChart>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), BarChart.class);
    for (final BarChart e_1 : _filter_1) {
      boolean _equals_2 = Objects.equal(this.Targuet, "All");
      if (_equals_2) {
        String _string_6 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _plus_12 = ("/Web/" + _string_6);
        String _plus_13 = (_plus_12 + ".html");
        fsa.generateFile(_plus_13, 
          this.generateHTML(e_1));
        String _string_7 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _plus_14 = ("/Web/js/" + _string_7);
        String _plus_15 = (_plus_14 + ".js");
        fsa.generateFile(_plus_15, 
          this.generateJS(e_1));
        String _string_8 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _plus_16 = ("/python/" + _string_8);
        String _plus_17 = (_plus_16 + ".py");
        fsa.generateFile(_plus_17, 
          this.generatePy(e_1));
      } else {
        boolean _equals_3 = Objects.equal(this.Targuet, "Web");
        if (_equals_3) {
          String _string_9 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
          String _plus_18 = ("/Web/" + _string_9);
          String _plus_19 = (_plus_18 + ".html");
          fsa.generateFile(_plus_19, 
            this.generateHTML(e_1));
          String _string_10 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
          String _plus_20 = ("/Web/js/" + _string_10);
          String _plus_21 = (_plus_20 + ".js");
          fsa.generateFile(_plus_21, 
            this.generateJS(e_1));
        } else {
          String _string_11 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
          String _plus_22 = ("/python/" + _string_11);
          String _plus_23 = (_plus_22 + ".py");
          fsa.generateFile(_plus_23, 
            this.generatePy(e_1));
        }
      }
    }
    Iterable<LineChart> _filter_2 = Iterables.<LineChart>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), LineChart.class);
    for (final LineChart e_2 : _filter_2) {
      boolean _equals_4 = Objects.equal(this.Targuet, "All");
      if (_equals_4) {
        String _string_12 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
        String _plus_24 = ("/Web/" + _string_12);
        String _plus_25 = (_plus_24 + ".html");
        fsa.generateFile(_plus_25, 
          this.generateHTML(e_2));
        String _string_13 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
        String _plus_26 = ("/Web/js/" + _string_13);
        String _plus_27 = (_plus_26 + ".js");
        fsa.generateFile(_plus_27, 
          this.generateJS(e_2));
        String _string_14 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
        String _plus_28 = ("/python/" + _string_14);
        String _plus_29 = (_plus_28 + ".py");
        fsa.generateFile(_plus_29, 
          this.generatePy(e_2));
      } else {
        boolean _equals_5 = Objects.equal(this.Targuet, "Web");
        if (_equals_5) {
          String _string_15 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
          String _plus_30 = ("/Web/" + _string_15);
          String _plus_31 = (_plus_30 + ".html");
          fsa.generateFile(_plus_31, 
            this.generateHTML(e_2));
          String _string_16 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
          String _plus_32 = ("/Web/js/" + _string_16);
          String _plus_33 = (_plus_32 + ".js");
          fsa.generateFile(_plus_33, 
            this.generateJS(e_2));
        } else {
          String _string_17 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2).toString("/");
          String _plus_34 = ("/python/" + _string_17);
          String _plus_35 = (_plus_34 + ".py");
          fsa.generateFile(_plus_35, 
            this.generatePy(e_2));
        }
      }
    }
    Iterable<MapChart> _filter_3 = Iterables.<MapChart>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MapChart.class);
    for (final MapChart e_3 : _filter_3) {
      boolean _equals_6 = Objects.equal(this.Targuet, "All");
      if (_equals_6) {
        String _string_18 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
        String _plus_36 = ("/Web/" + _string_18);
        String _plus_37 = (_plus_36 + ".html");
        fsa.generateFile(_plus_37, 
          this.generateHTML(e_3));
        String _string_19 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
        String _plus_38 = ("/Web/js/" + _string_19);
        String _plus_39 = (_plus_38 + ".js");
        fsa.generateFile(_plus_39, 
          this.generateJS(e_3));
        String _string_20 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
        String _plus_40 = ("/python/" + _string_20);
        String _plus_41 = (_plus_40 + ".py");
        fsa.generateFile(_plus_41, 
          this.generatePy(e_3));
      } else {
        boolean _equals_7 = Objects.equal(this.Targuet, "Web");
        if (_equals_7) {
          String _string_21 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
          String _plus_42 = ("/Web/" + _string_21);
          String _plus_43 = (_plus_42 + ".html");
          fsa.generateFile(_plus_43, 
            this.generateHTML(e_3));
          String _string_22 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
          String _plus_44 = ("/Web/js/" + _string_22);
          String _plus_45 = (_plus_44 + ".js");
          fsa.generateFile(_plus_45, 
            this.generateJS(e_3));
        } else {
          String _string_23 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3).toString("/");
          String _plus_46 = ("/python/" + _string_23);
          String _plus_47 = (_plus_46 + ".py");
          fsa.generateFile(_plus_47, 
            this.generatePy(e_3));
        }
      }
    }
    Iterable<TableChart> _filter_4 = Iterables.<TableChart>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), TableChart.class);
    for (final TableChart e_4 : _filter_4) {
      boolean _equals_8 = Objects.equal(this.Targuet, "All");
      if (_equals_8) {
        String _string_24 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
        String _plus_48 = ("/Web/" + _string_24);
        String _plus_49 = (_plus_48 + ".html");
        fsa.generateFile(_plus_49, 
          this.generateHTML(e_4));
        String _string_25 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
        String _plus_50 = ("/Web/js/" + _string_25);
        String _plus_51 = (_plus_50 + ".js");
        fsa.generateFile(_plus_51, 
          this.generateJS(e_4));
        String _string_26 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
        String _plus_52 = ("/python/" + _string_26);
        String _plus_53 = (_plus_52 + ".py");
        fsa.generateFile(_plus_53, 
          this.generatePy(e_4));
      } else {
        boolean _equals_9 = Objects.equal(this.Targuet, "Web");
        if (_equals_9) {
          String _string_27 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
          String _plus_54 = ("/Web/" + _string_27);
          String _plus_55 = (_plus_54 + ".html");
          fsa.generateFile(_plus_55, 
            this.generateHTML(e_4));
          String _string_28 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
          String _plus_56 = ("/Web/js/" + _string_28);
          String _plus_57 = (_plus_56 + ".js");
          fsa.generateFile(_plus_57, 
            this.generateJS(e_4));
        } else {
          String _string_29 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4).toString("/");
          String _plus_58 = ("/python/" + _string_29);
          String _plus_59 = (_plus_58 + ".py");
          fsa.generateFile(_plus_59, 
            this.generatePy(e_4));
        }
      }
    }
    Iterable<DashBoard> _filter_5 = Iterables.<DashBoard>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DashBoard.class);
    for (final DashBoard e_5 : _filter_5) {
      if ((Objects.equal(this.Targuet, "All") || Objects.equal(this.Targuet, "Web"))) {
        String _string_30 = this._iQualifiedNameProvider.getFullyQualifiedName(e_5).toString("/");
        String _plus_60 = ("/Web/" + _string_30);
        String _plus_61 = (_plus_60 + ".html");
        fsa.generateFile(_plus_61, 
          this.compileHTML(e_5));
      }
    }
  }
  
  /**
   * this is the method to generate Html file in a "default_location/web" folder.
   * e is the Pie Chart Object with contain information from Metamodel to generate file.
   */
  public CharSequence generateHTML(final PieChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<script src=\"js/properties.js\"></script>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<script src=\"js/");
    String _name = e.getName();
    _builder.append(_name, "       ");
    _builder.append(".js\"></script>");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/*CLASS*/");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".grafico{");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("width: 50%;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("height: 300px;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("min-width: 250px;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append(".grafico .title{");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("#");
    String _name_1 = e.getName();
    _builder.append(_name_1, "       \t");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("       \t\t");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("height: 100%;");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<div class=\"grafico\">");
    _builder.newLine();
    _builder.append("     \t    ");
    _builder.append("<div class=\"title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value, "     \t    ");
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("     \t\t");
    _builder.append("<div id=\"");
    String _name_2 = e.getName();
    _builder.append(_name_2, "     \t\t");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * this is the method to generate JavaScript file in a default_location/web/js folder.
   * e is the Pie Chart Object with contain information from Metamodel to generate file.
   */
  public CharSequence generateJS(final PieChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("google.charts.load(\'current\', {\'packages\':[\'corechart\']});");
    _builder.newLine();
    _builder.append("google.charts.setOnLoadCallback(drawChart");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _equals = Objects.equal(this.Normalice, "True");
      if (_equals) {
        _builder.append("//Normalice your data");
        _builder.newLine();
        _builder.append("function normaliceData(t){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("for(x in t){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(var j = 0; j < t.length; j++){      ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if(t[x][0]==t[j][0] && x != j){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t[x][1]=t[x][1]+t[j][1];");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t.splice(j,1);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("j=j-1;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("};");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t\t\t\t                  ");
    _builder.newLine();
    _builder.append("function drawChart");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("$.getJSON(");
    CharSequence _uRL = this.getURL(e.getTuple().getUrl());
    _builder.append(_uRL);
    _builder.append(", function(response){");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var t=[[\"");
    String _name_2 = e.getTuple().getValue1().getName();
    _builder.append(_name_2, "\t");
    _builder.append("\",\"");
    String _name_3 = e.getTuple().getValue2().getName();
    _builder.append(_name_3, "\t");
    _builder.append("\"]]");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for(var i in response){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(response[i][\"");
    String _name_4 = e.getTuple().getValue1().getName();
    _builder.append(_name_4, "\t\t");
    _builder.append("\"] != \"-\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("t.push([response[i][\"");
    String _name_5 = e.getTuple().getValue1().getName();
    _builder.append(_name_5, "\t\t\t");
    _builder.append("\"],parseInt(response[i][\"");
    String _name_6 = e.getTuple().getValue2().getName();
    _builder.append(_name_6, "\t\t\t");
    _builder.append("\"])]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _equals_1 = Objects.equal(this.Normalice, "True");
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("normaliceData(t);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("var data = new google.visualization.arrayToDataTable(t);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var options = {");
    {
      int _size = IterableExtensions.size(Iterables.<Legend>filter(e.getFeatures(), Legend.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          String _value = ((Legend[])Conversions.unwrapArray(Iterables.<Legend>filter(e.getFeatures(), Legend.class), Legend.class))[0].getValue();
          boolean _equals_2 = Objects.equal(_value, "False");
          if (_equals_2) {
            _builder.append("legend:{ position:\"none\"},");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    {
      int _size_1 = IterableExtensions.size(Iterables.<Hole>filter(e.getFeatures(), Hole.class));
      boolean _tripleNotEquals_1 = (_size_1 != 0);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        {
          String _value_1 = ((Hole[])Conversions.unwrapArray(Iterables.<Hole>filter(e.getFeatures(), Hole.class), Hole.class))[0].getValue();
          boolean _equals_3 = Objects.equal(_value_1, "True");
          if (_equals_3) {
            _builder.append("pieHole: 0.4,");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("chartArea:{width:\'100%\',height:\'100%\'},");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("colors:[\'#378ED1\',\'#3CAB65\',\'#904C9F\',\'#B7344C\',\'#AAB929\',\'#CE6B00\',\'#219A94\',\'#75AA73\',\'#54315C\',\'#7C1B2D\',\'#6B6C64\',\'#AFA318\']};");
    _builder.newLine();
    _builder.append("\t\t\t\t                          ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Instantiate and draw our chart, passing in some options.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var chart = new google.visualization.PieChart(document.getElementById(\'");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t");
    _builder.append("\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("chart.draw(data, options);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var err = textStatus + \", \" + error;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("console.log( \"Request Failed: \" + err );");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});//END getJSON");
    _builder.newLine();
    _builder.append("}          ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePy(final PieChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("Pie Chart Code generated - this code es generated based on DSL.");
    _builder.newLine();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from urllib.request import urlopen");
    _builder.newLine();
    _builder.append("import matplotlib.pyplot as plt");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.newLine();
    String _name = e.getTuple().getValue1().getName();
    _builder.append(_name);
    _builder.append("=[]");
    _builder.newLineIfNotEmpty();
    String _name_1 = e.getTuple().getValue2().getName();
    _builder.append(_name_1);
    _builder.append("=[]");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("URL=\"");
    String _value = e.getTuple().getUrl().getValue();
    _builder.append(_value);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("response=json.load(urlopen(URL))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("for i in response:");
    _builder.newLine();
    _builder.append("    ");
    String _name_2 = e.getTuple().getValue1().getName();
    _builder.append(_name_2, "    ");
    _builder.append(".append(i[\"");
    String _name_3 = e.getTuple().getValue1().getName();
    _builder.append(_name_3, "    ");
    _builder.append("\"])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("diccionario=list(set(");
    String _name_4 = e.getTuple().getValue1().getName();
    _builder.append(_name_4);
    _builder.append("))");
    _builder.newLineIfNotEmpty();
    _builder.append("for i in diccionario:");
    _builder.newLine();
    _builder.append("    ");
    String _name_5 = e.getTuple().getValue2().getName();
    _builder.append(_name_5, "    ");
    _builder.append(".append(0)   ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("for i in response:");
    _builder.newLine();
    _builder.append("    ");
    String _name_6 = e.getTuple().getValue2().getName();
    _builder.append(_name_6, "    ");
    _builder.append("[diccionario.index(i[\"");
    String _name_7 = e.getTuple().getValue1().getName();
    _builder.append(_name_7, "    ");
    _builder.append("\"])]+=int(i[\"");
    String _name_8 = e.getTuple().getValue2().getName();
    _builder.append(_name_8, "    ");
    _builder.append("\"])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("plt.style.use(\'ggplot\')");
    _builder.newLine();
    _builder.append("fig, ax = plt.subplots()");
    _builder.newLine();
    _builder.newLine();
    {
      int _size = IterableExtensions.size(Iterables.<Hole>filter(e.getFeatures(), Hole.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        {
          String _value_1 = ((Hole[])Conversions.unwrapArray(Iterables.<Hole>filter(e.getFeatures(), Hole.class), Hole.class))[0].getValue();
          boolean _equals = Objects.equal(_value_1, "True");
          if (_equals) {
            _builder.append("centre_circle = plt.Circle((0,0),0.45,color=\'black\', fc=\'white\')");
            _builder.newLine();
            _builder.append("fig = plt.gcf()");
            _builder.newLine();
            _builder.append("fig.gca().add_artist(centre_circle)");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("ax.pie(");
    String _name_9 = e.getTuple().getValue2().getName();
    _builder.append(_name_9);
    _builder.append(", labels=diccionario, autopct=\'%1.1f%%\', startangle=90)");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      int _size_1 = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals_1 = (_size_1 != 0);
      if (_tripleNotEquals_1) {
        _builder.append("ax.set_title(\"");
        String _value_2 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value_2);
        _builder.append("\")");
      }
    }
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("ax.axis(\'equal\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fig_size = plt.rcParams[\"figure.figsize\"]");
    _builder.newLine();
    _builder.append("fig_size[0] = 4 #width");
    _builder.newLine();
    _builder.append("fig_size[1] = 4 #Height");
    _builder.newLine();
    _builder.append("plt.rcParams[\"figure.figsize\"] = fig_size");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("plt.show()");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHTML(final BarChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--Load the AJAX API-->");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<script src=\"js/properties.js\"></script>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<script src=\"js/");
    String _name = e.getName();
    _builder.append(_name, "     ");
    _builder.append(".js\"></script>");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("/*CLASS*/");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append(".grafico{");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("width: 50%;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("height: 300px;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("min-width: 250px;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     \t           \t");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append(".grafico .title{");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append("#");
    String _name_1 = e.getName();
    _builder.append(_name_1, "     \t");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("     \t\t");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("     \t\t");
    _builder.append("height: 100%;");
    _builder.newLine();
    _builder.append("     \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("</head>\t   ");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"grafico\">");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("<div class=\"title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value, "    \t    ");
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t    ");
    _builder.append("<div id=\"");
    String _name_2 = e.getName();
    _builder.append(_name_2, "    \t    ");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateJS(final BarChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("google.charts.load(\'current\', {packages: [\'corechart\', \'bar\']});");
    _builder.newLine();
    _builder.append("google.charts.setOnLoadCallback(drawBasic");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _equals = Objects.equal(this.Normalice, "True");
      if (_equals) {
        _builder.append("//Normalice your data");
        _builder.newLine();
        _builder.append("function normaliceData(t){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("for(x in t){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(var j = 0; j < t.length; j++){      ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if(t[x][0]==t[j][0] && x != j){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t[x][1]=t[x][1]+t[j][1];");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t.splice(j,1);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("j=j-1;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("};");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("function drawBasic");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t   ");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.newLine();
    _builder.append("$.getJSON(");
    CharSequence _uRL = this.getURL(e.getTuple().getUrl());
    _builder.append(_uRL);
    _builder.append(", function(response){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var t=[[\"");
    String _name_2 = e.getTuple().getValue1().getName();
    _builder.append(_name_2, "\t");
    _builder.append("\"");
    {
      EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2 = e.getTuple().getValue2();
      for(final org.uis.lenguajegrafico.lenguajegrafico.Number v : _value2) {
        _builder.append(",\"");
        String _name_3 = v.getName();
        _builder.append(_name_3, "\t");
        _builder.append("\"");
      }
    }
    _builder.append("]]");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for(var i in response){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(response[i][\"");
    String _name_4 = e.getTuple().getValue1().getName();
    _builder.append(_name_4, "\t\t");
    _builder.append("\"] != \"-\"){");
    _builder.newLineIfNotEmpty();
    {
      Datatype _value1 = e.getTuple().getValue1();
      if ((_value1 instanceof Text)) {
        _builder.append("\t\t\t");
        _builder.append("t.push([response[i][\"");
        String _name_5 = e.getTuple().getValue1().getName();
        _builder.append(_name_5, "\t\t\t");
        _builder.append("\"]");
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_1 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_1 : _value2_1) {
            _builder.append(",parseInt(response[i][\"");
            String _name_6 = v_1.getName();
            _builder.append(_name_6, "\t\t\t");
            _builder.append("\"])");
          }
        }
        _builder.append("]);");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t\t");
        _builder.append("t.push([parseInt(response[i][\"");
        String _name_7 = e.getTuple().getValue1().getName();
        _builder.append(_name_7, "\t\t\t");
        _builder.append("\"])");
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_2 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_2 : _value2_2) {
            _builder.append(",parseInt(response[i][\"");
            String _name_8 = v_2.getName();
            _builder.append(_name_8, "\t\t\t");
            _builder.append("\"])");
          }
        }
        _builder.append("]);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _equals_1 = Objects.equal(this.Normalice, "True");
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("normaliceData(t);\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("var data = new google.visualization.arrayToDataTable(t);                                                                  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var options = {");
    {
      int _size = IterableExtensions.size(Iterables.<Legend>filter(e.getFeatures(), Legend.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          String _value = ((Legend[])Conversions.unwrapArray(Iterables.<Legend>filter(e.getFeatures(), Legend.class), Legend.class))[0].getValue();
          boolean _equals_2 = Objects.equal(_value, "False");
          if (_equals_2) {
            _builder.append("legend:{ position:\"none\"},");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      int _size_1 = IterableExtensions.size(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class));
      boolean _tripleNotEquals_1 = (_size_1 != 0);
      if (_tripleNotEquals_1) {
        _builder.append("hAxis: {title:\"");
        String _value_1 = ((Labelx[])Conversions.unwrapArray(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class), Labelx.class))[0].getValue();
        _builder.append(_value_1, "\t");
        _builder.append("\"},");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      int _size_2 = IterableExtensions.size(Iterables.<Labely>filter(e.getFeatures(), Labely.class));
      boolean _tripleNotEquals_2 = (_size_2 != 0);
      if (_tripleNotEquals_2) {
        _builder.append("vAxis: {title:\"");
        String _value_2 = ((Labely[])Conversions.unwrapArray(Iterables.<Labely>filter(e.getFeatures(), Labely.class), Labely.class))[0].getValue();
        _builder.append(_value_2, "\t");
        _builder.append("\"},");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("chartArea:{width:\'70%\',height:\'70%\'},animation:{duration: 1000,easing: \'linear\',startup: true}};");
    _builder.newLine();
    _builder.append("\t\t\t     ");
    _builder.newLine();
    {
      int _size_3 = IterableExtensions.size(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class));
      boolean _tripleNotEquals_3 = (_size_3 != 0);
      if (_tripleNotEquals_3) {
        {
          String _value_3 = ((Orientation[])Conversions.unwrapArray(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class), Orientation.class))[0].getValue();
          boolean _equals_3 = Objects.equal(_value_3, "Vertical");
          if (_equals_3) {
            _builder.append("\t");
            _builder.append("var chart = new google.visualization.ColumnChart(document.getElementById(\'");
            String _name_9 = e.getName();
            _builder.append(_name_9, "\t");
            _builder.append("\'));");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("var chart = new google.visualization.BarChart(document.getElementById(\'");
            String _name_10 = e.getName();
            _builder.append(_name_10, "\t");
            _builder.append("\'));");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("\t");
        _builder.append("var chart = new google.visualization.ColumnChart(document.getElementById(\'");
        String _name_11 = e.getName();
        _builder.append(_name_11, "\t");
        _builder.append("\'));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t     ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("chart.draw(data, options);       ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var err = textStatus + \", \" + error;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("console.log( \"Request Failed: \" + err );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});//END getJSON");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePy(final BarChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("Column Chart Code generated - this code es generated based on DSL.\t");
    _builder.newLine();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from urllib.request import urlopen");
    _builder.newLine();
    _builder.append("import matplotlib.pyplot as plt");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.append("import numpy as np");
    _builder.newLine();
    _builder.newLine();
    _builder.append("colors=[\"#378ED1\",\"#3CAB65\",\"#904C9F\",\"#B7344C\",\"#AAB929\",\"#CE6B00\",\"#219A94\"]");
    _builder.newLine();
    _builder.append("column=0");
    _builder.newLine();
    {
      int _size = e.getTuple().getValue2().size();
      boolean _greaterThan = (_size > 2);
      if (_greaterThan) {
        _builder.append("width = 0.30");
        _builder.newLine();
      } else {
        _builder.append("width = 0.50");
        _builder.newLine();
      }
    }
    _builder.newLine();
    String _name = e.getTuple().getValue1().getName();
    _builder.append(_name);
    _builder.append("=[]");
    _builder.newLineIfNotEmpty();
    {
      EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2 = e.getTuple().getValue2();
      for(final org.uis.lenguajegrafico.lenguajegrafico.Number v : _value2) {
        String _name_1 = v.getName();
        _builder.append(_name_1);
        _builder.append("=[]");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("URL=\"");
    String _value = e.getTuple().getUrl().getValue();
    _builder.append(_value);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("response=json.load(urlopen(URL))");
    _builder.newLine();
    _builder.newLine();
    {
      Datatype _value1 = e.getTuple().getValue1();
      if ((_value1 instanceof Text)) {
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if i[\"");
        String _name_2 = e.getTuple().getValue1().getName();
        _builder.append(_name_2, "    ");
        _builder.append("\"] != \"-\":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        String _name_3 = e.getTuple().getValue1().getName();
        _builder.append(_name_3, "        ");
        _builder.append(".append(i[\"");
        String _name_4 = e.getTuple().getValue1().getName();
        _builder.append(_name_4, "        ");
        _builder.append("\"])");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("diccionario=list(set(");
        String _name_5 = e.getTuple().getValue1().getName();
        _builder.append(_name_5);
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("for i in diccionario:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_1 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_1 : _value2_1) {
            _builder.append("    ");
            String _name_6 = v_1.getName();
            _builder.append(_name_6, "    ");
            _builder.append(".append(0)");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("x = np.arange(len(diccionario))");
        _builder.newLine();
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_2 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_2 : _value2_2) {
            _builder.append("    ");
            String _name_7 = v_2.getName();
            _builder.append(_name_7, "    ");
            _builder.append("[diccionario.index(i[\"");
            String _name_8 = e.getTuple().getValue1().getName();
            _builder.append(_name_8, "    ");
            _builder.append("\"])]+=int(i[\"");
            String _name_9 = v_2.getName();
            _builder.append(_name_9, "    ");
            _builder.append("\"])");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("plt.style.use(\'ggplot\')");
        _builder.newLine();
        _builder.append("fig, ax = plt.subplots()");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        {
          int _size_1 = IterableExtensions.size(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class));
          boolean _tripleNotEquals = (_size_1 != 0);
          if (_tripleNotEquals) {
            {
              String _value_1 = ((Orientation[])Conversions.unwrapArray(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class), Orientation.class))[0].getValue();
              boolean _equals = Objects.equal(_value_1, "Vertical");
              if (_equals) {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_3 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_3 : _value2_3) {
                    _builder.append("ax.bar(x+width*column,");
                    String _name_10 = v_3.getName();
                    _builder.append(_name_10);
                    _builder.append(",width,color=colors[column])");
                    _builder.newLineIfNotEmpty();
                    _builder.append("column += 1");
                    _builder.newLine();
                  }
                }
                _builder.append("if(column>1):");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("plt.xticks(x+width*column/column,diccionario, rotation=\'vertical\')");
                _builder.newLine();
                _builder.append("else:");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("plt.xticks(x+width/2,diccionario, rotation=\'vertical\')");
                _builder.newLine();
              } else {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_4 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_4 : _value2_4) {
                    _builder.append("ax.barh(x+width*column,");
                    String _name_11 = v_4.getName();
                    _builder.append(_name_11);
                    _builder.append(",width,color=colors[column])");
                    _builder.newLineIfNotEmpty();
                    _builder.append("column += 1");
                    _builder.newLine();
                  }
                }
                _builder.append("if(column>1):");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("plt.yticks(x+width*column/column,diccionario, rotation=\'horizontal\')");
                _builder.newLine();
                _builder.append("else:");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("plt.yticks(x+width/2,diccionario, rotation=\'horizontal\')");
                _builder.newLine();
              }
            }
          } else {
            {
              EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_5 = e.getTuple().getValue2();
              for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_5 : _value2_5) {
                _builder.append("ax.bar(x+width*column,");
                String _name_12 = v_5.getName();
                _builder.append(_name_12);
                _builder.append(",width,color=colors[column])");
                _builder.newLineIfNotEmpty();
                _builder.append("column += 1");
                _builder.newLine();
              }
            }
            _builder.append("if(column>1):");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("plt.xticks(x+width*column/column,diccionario, rotation=\'vertical\')");
            _builder.newLine();
            _builder.append("else:");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("plt.xticks(x+width/2,diccionario, rotation=\'vertical\')");
            _builder.newLine();
          }
        }
        _builder.newLine();
      } else {
        _builder.append("for i in response:");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if i[\"");
        String _name_13 = e.getTuple().getValue1().getName();
        _builder.append(_name_13, "    ");
        _builder.append("\"] != \"-\":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        String _name_14 = e.getTuple().getValue1().getName();
        _builder.append(_name_14, "        ");
        _builder.append(".append(int(i[\"");
        String _name_15 = e.getTuple().getValue1().getName();
        _builder.append(_name_15, "        ");
        _builder.append("\"]))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("diccionario=list(set(");
        String _name_16 = e.getTuple().getValue1().getName();
        _builder.append(_name_16);
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("for i in diccionario:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_6 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_6 : _value2_6) {
            _builder.append("\t");
            String _name_17 = v_6.getName();
            _builder.append(_name_17, "\t");
            _builder.append(".append(0)");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_7 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_7 : _value2_7) {
            _builder.append("\t");
            String _name_18 = v_7.getName();
            _builder.append(_name_18, "\t");
            _builder.append("[diccionario.index(int(i[\"");
            String _name_19 = e.getTuple().getValue1().getName();
            _builder.append(_name_19, "\t");
            _builder.append("\"]))]+=int(i[\"");
            String _name_20 = v_7.getName();
            _builder.append(_name_20, "\t");
            _builder.append("\"])");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.newLine();
        _builder.append("fig, ax = plt.subplots()");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        {
          int _size_2 = IterableExtensions.size(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class));
          boolean _tripleNotEquals_1 = (_size_2 != 0);
          if (_tripleNotEquals_1) {
            {
              String _value_2 = ((Orientation[])Conversions.unwrapArray(Iterables.<Orientation>filter(e.getFeatures(), Orientation.class), Orientation.class))[0].getValue();
              boolean _equals_1 = Objects.equal(_value_2, "Vertical");
              if (_equals_1) {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_8 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_8 : _value2_8) {
                    _builder.append("ax.bar(diccionario,");
                    String _name_21 = v_8.getName();
                    _builder.append(_name_21);
                    _builder.append(",width,color=colors[column])");
                    _builder.newLineIfNotEmpty();
                    _builder.append("column += 1");
                    _builder.newLine();
                  }
                }
              } else {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_9 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_9 : _value2_9) {
                    _builder.append("ax.barh(diccionario,");
                    String _name_22 = v_9.getName();
                    _builder.append(_name_22);
                    _builder.append(",width,color=colors[column])");
                    _builder.newLineIfNotEmpty();
                    _builder.append("column += 1");
                    _builder.newLine();
                  }
                }
              }
            }
          } else {
            {
              EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_10 = e.getTuple().getValue2();
              for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_10 : _value2_10) {
                _builder.append("ax.bar(diccionario,");
                String _name_23 = v_10.getName();
                _builder.append(_name_23);
                _builder.append(",width,color=colors[column])");
                _builder.newLineIfNotEmpty();
                _builder.append("column += 1");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.newLine();
    {
      int _size_3 = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals_2 = (_size_3 != 0);
      if (_tripleNotEquals_2) {
        _builder.append("ax.set_title(\"");
        String _value_3 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value_3);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      int _size_4 = IterableExtensions.size(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class));
      boolean _tripleNotEquals_3 = (_size_4 != 0);
      if (_tripleNotEquals_3) {
        _builder.append("ax.set_xlabel(\"");
        String _value_4 = ((Labelx[])Conversions.unwrapArray(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class), Labelx.class))[0].getValue();
        _builder.append(_value_4);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      int _size_5 = IterableExtensions.size(Iterables.<Labely>filter(e.getFeatures(), Labely.class));
      boolean _tripleNotEquals_4 = (_size_5 != 0);
      if (_tripleNotEquals_4) {
        _builder.append("ax.set_ylabel(\"");
        String _value_5 = ((Labely[])Conversions.unwrapArray(Iterables.<Labely>filter(e.getFeatures(), Labely.class), Labely.class))[0].getValue();
        _builder.append(_value_5);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("plt.style.use(\'ggplot\')");
    _builder.newLine();
    _builder.append("fig_size = plt.rcParams[\"figure.figsize\"]");
    _builder.newLine();
    _builder.append("fig_size[0] = 6 #width");
    _builder.newLine();
    _builder.append("fig_size[1] = 4 #Height");
    _builder.newLine();
    _builder.append("plt.rcParams[\"figure.figsize\"] = fig_size");
    _builder.newLine();
    _builder.newLine();
    _builder.append("plt.show()");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHTML(final LineChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!--Load the AJAX API-->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"js/properties.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"js/");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(".js\"></script> ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*CLASS*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".grafico{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("width: 50%;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("height: 300px;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("min-width: 250px;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".grafico .title{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("</style> ");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<div class=\"grafico\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value, "\t");
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div id=\"");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateJS(final LineChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("google.charts.load(\'current\', {\'packages\':[\'corechart\']});");
    _builder.newLine();
    _builder.append("google.charts.setOnLoadCallback(drawChart");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _equals = Objects.equal(this.Normalice, "True");
      if (_equals) {
        _builder.append("//Normalice your data");
        _builder.newLine();
        _builder.append("function normaliceData(t){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("for(x in t){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(var j = 0; j < t.length; j++){      ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if(t[x][0]==t[j][0] && x != j){");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t[x][1]=t[x][1]+t[j][1];");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("t.splice(j,1);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("j=j-1;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("function comparar(a, b) {");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("return a[0] - b[0];");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("function drawChart");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("$.getJSON(");
    CharSequence _uRL = this.getURL(e.getTuple().getUrl());
    _builder.append(_uRL);
    _builder.append(", function(response){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("var t=[[\"");
    String _name_2 = e.getTuple().getValue1().getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\"");
    {
      EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2 = e.getTuple().getValue2();
      for(final org.uis.lenguajegrafico.lenguajegrafico.Number v : _value2) {
        _builder.append(",\"");
        String _name_3 = v.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\"");
      }
    }
    _builder.append("]]");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for(var i in response){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(response[i][\"");
    String _name_4 = e.getTuple().getValue1().getName();
    _builder.append(_name_4, "\t\t\t");
    _builder.append("\"] != \"-\"){");
    _builder.newLineIfNotEmpty();
    {
      Datatype _value1 = e.getTuple().getValue1();
      if ((_value1 instanceof Text)) {
        _builder.append("\t\t\t\t");
        _builder.append("t.push([response[i][\"");
        String _name_5 = e.getTuple().getValue1().getName();
        _builder.append(_name_5, "\t\t\t\t");
        _builder.append("\"]");
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_1 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_1 : _value2_1) {
            _builder.append(",parseInt(response[i][\"");
            String _name_6 = v_1.getName();
            _builder.append(_name_6, "\t\t\t\t");
            _builder.append("\"])");
          }
        }
        _builder.append("]);");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t\t\t");
        _builder.append("t.push([parseInt(response[i][\"");
        String _name_7 = e.getTuple().getValue1().getName();
        _builder.append(_name_7, "\t\t\t\t");
        _builder.append("\"])");
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_2 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_2 : _value2_2) {
            _builder.append(",parseInt(response[i][\"");
            String _name_8 = v_2.getName();
            _builder.append(_name_8, "\t\t\t\t");
            _builder.append("\"])");
          }
        }
        _builder.append("]);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    {
      boolean _equals_1 = Objects.equal(this.Normalice, "True");
      if (_equals_1) {
        _builder.append("\t\t");
        _builder.append("normaliceData(t);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("t.sort(comparar);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t     ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var data = new google.visualization.arrayToDataTable(t);                                                                  ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var options = {");
    {
      int _size = IterableExtensions.size(Iterables.<Legend>filter(e.getFeatures(), Legend.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        {
          String _value = ((Legend[])Conversions.unwrapArray(Iterables.<Legend>filter(e.getFeatures(), Legend.class), Legend.class))[0].getValue();
          boolean _equals_2 = Objects.equal(_value, "False");
          if (_equals_2) {
            _builder.append("legend:{ position:\"none\"},");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      int _size_1 = IterableExtensions.size(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class));
      boolean _tripleNotEquals_1 = (_size_1 != 0);
      if (_tripleNotEquals_1) {
        _builder.append("hAxis: {title:\"");
        String _value_1 = ((Labelx[])Conversions.unwrapArray(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class), Labelx.class))[0].getValue();
        _builder.append(_value_1, "\t\t");
        _builder.append("\"},");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      int _size_2 = IterableExtensions.size(Iterables.<Labely>filter(e.getFeatures(), Labely.class));
      boolean _tripleNotEquals_2 = (_size_2 != 0);
      if (_tripleNotEquals_2) {
        _builder.append("vAxis: {title:\"");
        String _value_2 = ((Labely[])Conversions.unwrapArray(Iterables.<Labely>filter(e.getFeatures(), Labely.class), Labely.class))[0].getValue();
        _builder.append(_value_2, "\t\t");
        _builder.append("\"},");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("chartArea:{width:\'70%\',height:\'70%\'},animation:{duration: 1000,easing: \'linear\',startup: true}};");
    _builder.newLine();
    _builder.append("\t\t\t\t     ");
    _builder.newLine();
    {
      int _size_3 = IterableExtensions.size(Iterables.<Area>filter(e.getFeatures(), Area.class));
      boolean _tripleNotEquals_3 = (_size_3 != 0);
      if (_tripleNotEquals_3) {
        {
          String _value_3 = ((Area[])Conversions.unwrapArray(Iterables.<Area>filter(e.getFeatures(), Area.class), Area.class))[0].getValue();
          boolean _equals_3 = Objects.equal(_value_3, "True");
          if (_equals_3) {
            _builder.append("\t\t");
            _builder.append("var chart = new google.visualization.AreaChart(document.getElementById(\'");
            String _name_9 = e.getName();
            _builder.append(_name_9, "\t\t");
            _builder.append("\'));");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("var chart = new google.visualization.LineChart(document.getElementById(\'");
            String _name_10 = e.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append("\'));");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("\t\t");
        _builder.append("var chart = new google.visualization.LineChart(document.getElementById(\'");
        String _name_11 = e.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("\'));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t     ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("chart.draw(data, options);       ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var err = textStatus + \", \" + error;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("console.log( \"Request Failed: \" + err );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});//END getJSON");
    _builder.newLine();
    _builder.append("}  ");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePy(final LineChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("Column Chart Code generated - this code es generated based on DSL.\t");
    _builder.newLine();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("from urllib.request import urlopen");
    _builder.newLine();
    _builder.append("import matplotlib.pyplot as plt");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.append("import numpy as np");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("column=0");
    _builder.newLine();
    _builder.newLine();
    String _name = e.getTuple().getValue1().getName();
    _builder.append(_name);
    _builder.append("=[]");
    _builder.newLineIfNotEmpty();
    {
      EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2 = e.getTuple().getValue2();
      for(final org.uis.lenguajegrafico.lenguajegrafico.Number v : _value2) {
        String _name_1 = v.getName();
        _builder.append(_name_1);
        _builder.append("=[]");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("URL=\"");
    String _value = e.getTuple().getUrl().getValue();
    _builder.append(_value);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("response=json.load(urlopen(URL))");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Datatype _value1 = e.getTuple().getValue1();
      if ((_value1 instanceof Text)) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if i[\"");
        String _name_2 = e.getTuple().getValue1().getName();
        _builder.append(_name_2, "    ");
        _builder.append("\"] != \"-\":");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        String _name_3 = e.getTuple().getValue1().getName();
        _builder.append(_name_3, "        ");
        _builder.append(".append(i[\"");
        String _name_4 = e.getTuple().getValue1().getName();
        _builder.append(_name_4, "        ");
        _builder.append("\"])");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("diccionario=list(set(");
        String _name_5 = e.getTuple().getValue1().getName();
        _builder.append(_name_5);
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("for i in diccionario:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_1 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_1 : _value2_1) {
            _builder.append("    ");
            String _name_6 = v_1.getName();
            _builder.append(_name_6, "    ");
            _builder.append(".append(0)");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("x = np.arange(len(diccionario))");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_2 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_2 : _value2_2) {
            _builder.append("    ");
            String _name_7 = v_2.getName();
            _builder.append(_name_7, "    ");
            _builder.append("[diccionario.index(i[\"");
            String _name_8 = e.getTuple().getValue1().getName();
            _builder.append(_name_8, "    ");
            _builder.append("\"])]+=int(i[\"");
            String _name_9 = v_2.getName();
            _builder.append(_name_9, "    ");
            _builder.append("\"])");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("plt.style.use(\'ggplot\')");
        _builder.newLine();
        _builder.append("fig, ax = plt.subplots()");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        {
          int _size = IterableExtensions.size(Iterables.<Area>filter(e.getFeatures(), Area.class));
          boolean _tripleNotEquals = (_size != 0);
          if (_tripleNotEquals) {
            {
              String _value_1 = ((Area[])Conversions.unwrapArray(Iterables.<Area>filter(e.getFeatures(), Area.class), Area.class))[0].getValue();
              boolean _equals = Objects.equal(_value_1, "True");
              if (_equals) {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_3 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_3 : _value2_3) {
                    _builder.append("ax.stackplot(x,");
                    String _name_10 = v_3.getName();
                    _builder.append(_name_10);
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_4 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_4 : _value2_4) {
                    _builder.append("ax.plot(x,");
                    String _name_11 = v_4.getName();
                    _builder.append(_name_11);
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          } else {
            {
              EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_5 = e.getTuple().getValue2();
              for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_5 : _value2_5) {
                _builder.append("ax.plot(x,");
                String _name_12 = v_5.getName();
                _builder.append(_name_12);
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("plt.xticks(x,diccionario,rotation=\'vertical\')");
        _builder.newLine();
      } else {
        _builder.append("for i in response:");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("if i[\"");
        String _name_13 = e.getTuple().getValue1().getName();
        _builder.append(_name_13, "    ");
        _builder.append("\"] != \"-\":");
        _builder.newLineIfNotEmpty();
        _builder.append("         ");
        String _name_14 = e.getTuple().getValue1().getName();
        _builder.append(_name_14, "         ");
        _builder.append(".append(int(i[\"");
        String _name_15 = e.getTuple().getValue1().getName();
        _builder.append(_name_15, "         ");
        _builder.append("\"]))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("diccionario=list(set(");
        String _name_16 = e.getTuple().getValue1().getName();
        _builder.append(_name_16);
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("for i in diccionario:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_6 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_6 : _value2_6) {
            _builder.append("    ");
            String _name_17 = v_6.getName();
            _builder.append(_name_17, "    ");
            _builder.append(".append(0)");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("for i in response:");
        _builder.newLine();
        {
          EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_7 = e.getTuple().getValue2();
          for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_7 : _value2_7) {
            _builder.append("    ");
            String _name_18 = v_7.getName();
            _builder.append(_name_18, "    ");
            _builder.append("[diccionario.index(int(i[\"");
            String _name_19 = e.getTuple().getValue1().getName();
            _builder.append(_name_19, "    ");
            _builder.append("\"]))]+=int(i[\"");
            String _name_20 = v_7.getName();
            _builder.append(_name_20, "    ");
            _builder.append("\"])");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.newLine();
        _builder.append("plt.style.use(\'ggplot\')");
        _builder.newLine();
        _builder.append("fig, ax = plt.subplots()");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        {
          int _size_1 = IterableExtensions.size(Iterables.<Area>filter(e.getFeatures(), Area.class));
          boolean _tripleNotEquals_1 = (_size_1 != 0);
          if (_tripleNotEquals_1) {
            {
              String _value_2 = ((Area[])Conversions.unwrapArray(Iterables.<Area>filter(e.getFeatures(), Area.class), Area.class))[0].getValue();
              boolean _equals_1 = Objects.equal(_value_2, "True");
              if (_equals_1) {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_8 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_8 : _value2_8) {
                    _builder.append("ax.stackplot(diccionario,");
                    String _name_21 = v_8.getName();
                    _builder.append(_name_21);
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                {
                  EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_9 = e.getTuple().getValue2();
                  for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_9 : _value2_9) {
                    _builder.append("ax.plot(diccionario,");
                    String _name_22 = v_9.getName();
                    _builder.append(_name_22);
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          } else {
            {
              EList<org.uis.lenguajegrafico.lenguajegrafico.Number> _value2_10 = e.getTuple().getValue2();
              for(final org.uis.lenguajegrafico.lenguajegrafico.Number v_10 : _value2_10) {
                _builder.append("ax.plot(diccionario,");
                String _name_23 = v_10.getName();
                _builder.append(_name_23);
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      int _size_2 = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals_2 = (_size_2 != 0);
      if (_tripleNotEquals_2) {
        _builder.append("ax.set_title(\"");
        String _value_3 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value_3);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      int _size_3 = IterableExtensions.size(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class));
      boolean _tripleNotEquals_3 = (_size_3 != 0);
      if (_tripleNotEquals_3) {
        _builder.append("ax.set_xlabel(\"");
        String _value_4 = ((Labelx[])Conversions.unwrapArray(Iterables.<Labelx>filter(e.getFeatures(), Labelx.class), Labelx.class))[0].getValue();
        _builder.append(_value_4);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      int _size_4 = IterableExtensions.size(Iterables.<Labely>filter(e.getFeatures(), Labely.class));
      boolean _tripleNotEquals_4 = (_size_4 != 0);
      if (_tripleNotEquals_4) {
        _builder.append("ax.set_ylabel(\"");
        String _value_5 = ((Labely[])Conversions.unwrapArray(Iterables.<Labely>filter(e.getFeatures(), Labely.class), Labely.class))[0].getValue();
        _builder.append(_value_5);
        _builder.append("\")");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fig_size = plt.rcParams[\"figure.figsize\"]");
    _builder.newLine();
    _builder.append("fig_size[0] = 6 #width");
    _builder.newLine();
    _builder.append("fig_size[1] = 4 #Height");
    _builder.newLine();
    _builder.append("plt.rcParams[\"figure.figsize\"] = fig_size");
    _builder.newLine();
    _builder.append("plt.show()");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHTML(final MapChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    {
      if (((IterableExtensions.size(Iterables.<MakerType>filter(e.getFeatures(), MakerType.class)) != 0) && Objects.equal(((MakerType[])Conversions.unwrapArray(Iterables.<MakerType>filter(e.getFeatures(), MakerType.class), MakerType.class))[0].getValue(), "Group"))) {
        _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"js/properties.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"js/");
        String _name = e.getName();
        _builder.append(_name);
        _builder.append(".js\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script async defer");
        _builder.newLine();
        _builder.append("src=\"https://maps.googleapis.com/maps/api/js?callback=initMap\">");
        _builder.newLine();
        _builder.append("</script>");
        _builder.newLine();
        _builder.append("<script src=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"></script>");
        _builder.newLine();
      } else {
        _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"http://maps.google.com/maps/api/js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"js/properties.js\"></script>");
        _builder.newLine();
        _builder.append("<script src=\"js/");
        String _name_1 = e.getName();
        _builder.append(_name_1);
        _builder.append(".js\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("/*CLASS*/");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append(".grafico{");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("text-aling:center;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("width: 70%;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("height: 500px;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append(".grafico .title{");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("/*IDS*/");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("#");
    String _name_2 = e.getName();
    _builder.append(_name_2, "   \t\t");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t");
    _builder.append("width: 70%;");
    _builder.newLine();
    _builder.append("   \t\t    ");
    _builder.append("height: 500px;");
    _builder.newLine();
    _builder.append("   \t\t    ");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}\t   \t\t");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</style> ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"grafico\">");
    _builder.newLine();
    _builder.append("    \t    \t");
    _builder.append("<div class=\"title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value, "    \t    \t");
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t      \t");
    _builder.append("<div id=\"");
    String _name_3 = e.getName();
    _builder.append(_name_3, "    \t      \t");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateJS(final MapChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      if (((IterableExtensions.size(Iterables.<MakerType>filter(e.getFeatures(), MakerType.class)) == 0) || Objects.equal(((MakerType[])Conversions.unwrapArray(Iterables.<MakerType>filter(e.getFeatures(), MakerType.class), MakerType.class))[0].getValue(), "Normal"))) {
        _builder.append("google.charts.load(\'current\', {\'packages\': [\'map\'], \'callback\': drawChart});");
        _builder.newLine();
        _builder.append("\t      ");
        _builder.newLine();
        _builder.append("function drawChart() {");
        _builder.newLine();
        _builder.append("\t      \t");
        _builder.newLine();
        _builder.append("var data = new google.visualization.DataTable();");
        _builder.newLine();
        _builder.append("\t      \t");
        _builder.newLine();
        _builder.append("$.getJSON(");
        CharSequence _uRL = this.getURL(e.getTuple().getUrl());
        _builder.append(_uRL);
        _builder.append(", function(response){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("var t=[[\"");
        String _name = e.getTuple().getValue1().getName();
        _builder.append(_name, "\t");
        _builder.append("\",\"");
        String _name_1 = e.getTuple().getValue2().getName();
        _builder.append(_name_1, "\t");
        _builder.append("\",\"");
        String _name_2 = e.getTuple().getValue3().getName();
        _builder.append(_name_2, "\t");
        _builder.append("\"]]");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for(var i in response){");
        _builder.newLine();
        {
          Datatype _value3 = e.getTuple().getValue3();
          if ((_value3 instanceof Text)) {
            _builder.append("\t\t");
            _builder.append("t.push([parseFloat(response[i][\"");
            String _name_3 = e.getTuple().getValue1().getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("\"]),parseFloat(response[i][\"");
            String _name_4 = e.getTuple().getValue2().getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\"]),response[i][\"");
            String _name_5 = e.getTuple().getValue3().getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\"]]);");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("t.push([parseFloat(response[i][\"");
            String _name_6 = e.getTuple().getValue1().getName();
            _builder.append(_name_6, "\t\t");
            _builder.append("\"]),parseFloat(response[i][\"");
            String _name_7 = e.getTuple().getValue2().getName();
            _builder.append(_name_7, "\t\t");
            _builder.append("\"]),parseFloat(response[i][\"");
            String _name_8 = e.getTuple().getValue3().getName();
            _builder.append(_name_8, "\t\t");
            _builder.append("\"])]);");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t      ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("var options = {");
        _builder.newLine();
        {
          int _size = IterableExtensions.size(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class));
          boolean _tripleNotEquals = (_size != 0);
          if (_tripleNotEquals) {
            {
              int _value = ((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue();
              boolean _lessEqualsThan = (_value <= 15);
              if (_lessEqualsThan) {
                _builder.append("\t");
                _builder.append("zoomLevel: ");
                int _value_1 = ((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue();
                _builder.append(_value_1, "\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("zoomLevel: 10,");
                _builder.newLine();
              }
            }
          } else {
            _builder.append("\t");
            _builder.append("zoomLevel: 10,");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("enableScrollWheel:true,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("showTooltip: true,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("showInfoWindow: true,");
        _builder.newLine();
        {
          int _size_1 = IterableExtensions.size(Iterables.<MapType>filter(e.getFeatures(), MapType.class));
          boolean _tripleNotEquals_1 = (_size_1 != 0);
          if (_tripleNotEquals_1) {
            {
              String _value_2 = ((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue();
              boolean _equals = Objects.equal(_value_2, "general");
              if (_equals) {
                _builder.append("\t");
                _builder.append("mapType: \'styledMap\',");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("useMapTypeControl: true");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("mapType: \'");
                String _value_3 = ((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue();
                _builder.append(_value_3, "\t");
                _builder.append("\'");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t");
            _builder.append("mapType: \'styledMap\',");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("useMapTypeControl: true");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("};");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("var data = new google.visualization.arrayToDataTable(t);       ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("var chart = new google.visualization.Map(document.getElementById(\'");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t");
        _builder.append("\'));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("chart.draw(data, options);       ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("var err = textStatus + \", \" + error;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("console.log( \"Request Failed: \" + err );");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("});//END getJSON      \t");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      } else {
        {
          String _value_4 = ((MakerType[])Conversions.unwrapArray(Iterables.<MakerType>filter(e.getFeatures(), MakerType.class), MakerType.class))[0].getValue();
          boolean _equals_1 = Objects.equal(_value_4, "MagnitudeCircle");
          if (_equals_1) {
            _builder.append("function initialize() {");
            _builder.newLine();
            _builder.newLine();
            _builder.append("$.getJSON(");
            CharSequence _uRL_1 = this.getURL(e.getTuple().getUrl());
            _builder.append(_uRL_1);
            _builder.append(", function(response){");
            _builder.newLineIfNotEmpty();
            _builder.append("        ");
            _builder.newLine();
            _builder.append("var latTotal=0.0;");
            _builder.newLine();
            _builder.append("var longTotal=0.0;");
            _builder.newLine();
            _builder.append("for(var i in response){");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("latTotal+=parseFloat(response[i][\"");
            String _name_10 = e.getTuple().getValue1().getName();
            _builder.append(_name_10, "    ");
            _builder.append("\"]);");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("longTotal+=parseFloat(response[i][\"");
            String _name_11 = e.getTuple().getValue2().getName();
            _builder.append(_name_11, "    ");
            _builder.append("\"]);");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("var mapAttr = {");
            _builder.newLine();
            _builder.append("center: new google.maps.LatLng(latTotal/response.length,longTotal/response.length),");
            _builder.newLine();
            {
              if (((IterableExtensions.size(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class)) == 0) || (((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue() > 15))) {
                _builder.append("zoom: 10,");
                _builder.newLine();
              } else {
                _builder.append("zoom: ");
                int _value_5 = ((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue();
                _builder.append(_value_5);
                _builder.append(",");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if (((IterableExtensions.size(Iterables.<MapType>filter(e.getFeatures(), MapType.class)) == 0) || Objects.equal(((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue(), "general"))) {
                _builder.append("mapTypeId: \'roadmap\'");
                _builder.newLine();
              } else {
                _builder.append("mapTypeId: \'");
                String _value_6 = ((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue();
                _builder.append(_value_6);
                _builder.append("\'");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("};");
            _builder.newLine();
            _builder.newLine();
            _builder.append("var map = new google.maps.Map(document.getElementById(\"");
            String _name_12 = e.getName();
            _builder.append(_name_12);
            _builder.append("\"), mapAttr);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("for(var i in response){");
            _builder.newLine();
            _builder.newLine();
            _builder.append("var center = new google.maps.LatLng(parseFloat(response[i][\"");
            String _name_13 = e.getTuple().getValue1().getName();
            _builder.append(_name_13);
            _builder.append("\"]),parseFloat(response[i][\"");
            String _name_14 = e.getTuple().getValue2().getName();
            _builder.append(_name_14);
            _builder.append("\"]));");
            _builder.newLineIfNotEmpty();
            _builder.append("var magnitude=Math.abs(response[i][\"");
            String _name_15 = e.getTuple().getValue3().getName();
            _builder.append(_name_15);
            _builder.append("\"]);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("var circle = new google.maps.Circle({");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("center: center,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("map: map,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("radius: Math.pow(magnitude,3)*500,// IN METERS.");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("fillColor: \"#F90F0F\",");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("fillOpacity: 0.4,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("strokeColor: \"#FFF\",");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("strokeWeight: 0");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("});");
            _builder.newLine();
            _builder.append("}});//END GET JSON");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("google.maps.event.addDomListener(window, \'load\', initialize);");
            _builder.newLine();
          } else {
            _builder.append("function initMap() {\t");
            _builder.newLine();
            _builder.newLine();
            _builder.append("// Create an array of alphabetical characters used to label the markers.");
            _builder.newLine();
            _builder.append("var labels = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\';");
            _builder.newLine();
            _builder.newLine();
            _builder.append("$.getJSON(");
            CharSequence _uRL_2 = this.getURL(e.getTuple().getUrl());
            _builder.append(_uRL_2);
            _builder.append(", function(response){");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("var latTotal=0.0;");
            _builder.newLine();
            _builder.append("var longTotal=0.0;");
            _builder.newLine();
            _builder.append("for(var i in response){");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("latTotal+=parseFloat(response[i][\"");
            String _name_16 = e.getTuple().getValue1().getName();
            _builder.append(_name_16, "    ");
            _builder.append("\"]);");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("longTotal+=parseFloat(response[i][\"");
            String _name_17 = e.getTuple().getValue2().getName();
            _builder.append(_name_17, "    ");
            _builder.append("\"]);");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("var map = new google.maps.Map(document.getElementById(\'");
            String _name_18 = e.getName();
            _builder.append(_name_18);
            _builder.append("\'), {");
            _builder.newLineIfNotEmpty();
            {
              if (((IterableExtensions.size(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class)) == 0) || (((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue() > 15))) {
                _builder.append("\t");
                _builder.append("zoom: 7,");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("zoom: ");
                int _value_7 = ((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue();
                _builder.append(_value_7, "\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if (((IterableExtensions.size(Iterables.<MapType>filter(e.getFeatures(), MapType.class)) == 0) || Objects.equal(((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue(), "general"))) {
                _builder.append("\t");
                _builder.append("mapTypeId: \'roadmap\',");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("mapTypeId: \'");
                String _value_8 = ((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue();
                _builder.append(_value_8, "\t");
                _builder.append("\',");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("center: new google.maps.LatLng(latTotal/response.length,longTotal/response.length)");
            _builder.newLine();
            _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("var err = textStatus + \", \" + error;");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("console.log( \"Request Failed: \" + err );");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("});//END getJSON");
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.append("var locations = []");
            _builder.newLine();
            _builder.append("for(var i in response){");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("locations.push({lat:parseInt(response[i][\"");
            String _name_19 = e.getTuple().getValue1().getName();
            _builder.append(_name_19, "    ");
            _builder.append("\"]), lng:parseInt(response[i][\"");
            String _name_20 = e.getTuple().getValue2().getName();
            _builder.append(_name_20, "    ");
            _builder.append("\"])});");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("var markers = locations.map(function(location, i) {");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("return new google.maps.Marker({");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("position: location,");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("label: labels[i % labels.length]");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("});");
            _builder.newLine();
            _builder.append("});");
            _builder.newLine();
            _builder.newLine();
            _builder.append("// Add a marker clusterer to manage the markers.");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("var markerCluster = new MarkerClusterer(map, markers,");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("{imagePath: \'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\'});");
            _builder.newLine();
            _builder.append("});//END GET JSON");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePy(final MapChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("Map Chart Code generated - this code es generated based on DSL.");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("Autor: Henry Jimenez - Maria Fernanda Guerrero");
    _builder.newLine();
    _builder.append("Version: 24/05/2017");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("from __future__ import print_function");
    _builder.newLine();
    _builder.append("from __future__ import division");
    _builder.newLine();
    _builder.append("from urllib.request import urlopen");
    _builder.newLine();
    _builder.append("from PIL import Image");
    _builder.newLine();
    _builder.append("import numpy as np");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.append("import requests");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("def get_static_google_map(zoom=14, imgsize=\"500x500\", imgformat=\"jpeg\",maptype=\"hybrid\", markers=None ):");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baseURL  =  \"http://maps.google.com/maps/api/staticmap?\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baseURL += \"zoom=%i&\" % zoom  # zoom 0 (all of the world scale ) to 22 (single buildings scale)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baseURL += \"size=%s&\" % (imgsize) ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baseURL += \"format=%s&\" % imgformat");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baseURL += \"maptype=%s&\" % maptype  # roadmap, satellite, hybrid, terrain");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if markers != None:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("baseURL += markers");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return baseURL");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def save_imagen(StrMakers):");
    _builder.newLine();
    {
      if (((IterableExtensions.size(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class)) == 0) || (((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue() > 15))) {
        _builder.append("    ");
        _builder.append("zoom = 7");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("zoom = ");
        int _value = ((ZoomLevel[])Conversions.unwrapArray(Iterables.<ZoomLevel>filter(e.getFeatures(), ZoomLevel.class), ZoomLevel.class))[0].getValue();
        _builder.append(_value, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((IterableExtensions.size(Iterables.<MapType>filter(e.getFeatures(), MapType.class)) == 0) || Objects.equal(((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue(), "general"))) {
        _builder.append("    ");
        _builder.append("maptype= \'roadmap\'");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("maptype= \'");
        String _value_1 = ((MapType[])Conversions.unwrapArray(Iterables.<MapType>filter(e.getFeatures(), MapType.class), MapType.class))[0].getValue();
        _builder.append(_value_1, "    ");
        _builder.append("\'");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("url = get_static_google_map(zoom=zoom,markers=StrMakers,maptype=maptype)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("r = sesion.get(url)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("f=open(\'%s.png\' % FileName,\'wb\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("f.write(r.content)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("f.close()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("FileName=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("URL=\"");
    String _value_2 = e.getTuple().getUrl().getValue();
    _builder.append(_value_2);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("respuesta=json.load(urlopen(URL))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("StrMakers = \"markers=color:red\"");
    _builder.newLine();
    _builder.append("for r in respuesta[:100]:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StrMakers += \"|%s\" % str(r[\"");
    String _name_1 = e.getTuple().getValue1().getName();
    _builder.append(_name_1, "    ");
    _builder.append("\"])+\",\"+str(r[\"");
    String _name_2 = e.getTuple().getValue2().getName();
    _builder.append(_name_2, "    ");
    _builder.append("\"])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("sesion = requests.Session()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("save_imagen(StrMakers)");
    _builder.newLine();
    _builder.append("imagen = Image.open(\'%s.png\' % FileName)");
    _builder.newLine();
    _builder.append("imagen");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHTML(final TableChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"js/properties.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"js/");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(".js\"></script>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*This code block delete default style in google table chart*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("color: black;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-image: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-repeat: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-position: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-webkit-border-radius: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-moz-border-radius: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("border-radius: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("border-style: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("border-width: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("border-color: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-color: initial;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*CLASS*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".grafico{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("text-aling:center;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("width: 30%;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("height: 400px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".grafico .title{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("font-size: 30px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".headerTable{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-color: #1D7B9D;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("color: white;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".rowTable{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("background-color: #C5DEE6;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".rowTable:hover{");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("background-color: #66AEC9;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*IDS*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("z-index: auto;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("height: 400px;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("width: 50%;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t   \t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</style> ");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"grafico\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value, "\t\t");
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<div id=\"");
    String _name_2 = e.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateJS(final TableChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("google.charts.load(\'current\', {\'packages\': [\'table\'], \'callback\': drawTable});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function drawTable() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$.getJSON(");
    CharSequence _uRL = this.getURL(e.getTuple().getUrl());
    _builder.append(_uRL, "\t");
    _builder.append(", function(response){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var t=[[");
    {
      EList<Datatype> _values = e.getTuple().getValues();
      for(final Datatype v : _values) {
        _builder.append("\"");
        String _name = v.getName();
        _builder.append(_name, "\t");
        _builder.append("\",");
      }
    }
    _builder.append("]];");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for(var i in response){");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("t.push([");
    {
      EList<Datatype> _values_1 = e.getTuple().getValues();
      for(final Datatype v_1 : _values_1) {
        {
          if ((v_1 instanceof Text)) {
            _builder.append("response[i][\"");
            String _name_1 = ((Text)v_1).getName();
            _builder.append(_name_1, "\t    ");
            _builder.append("\"],");
          } else {
            {
              if ((v_1 instanceof Number)) {
                _builder.append("parseInt(response[i][\"");
                String _name_2 = v_1.getName();
                _builder.append(_name_2, "\t    ");
                _builder.append("\"]),");
              }
            }
            _builder.append("parseFloat(response[i][\"");
            String _name_3 = v_1.getName();
            _builder.append(_name_3, "\t    ");
            _builder.append("\"]),");
          }
        }
      }
    }
    _builder.append("]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var data = new google.visualization.arrayToDataTable(t);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var cssClassNames={headerCell:\'headerTable\',tableRow:\'rowTable\'};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var options={cssClassNames,width:\'90%\', height:\'90%\',allowHtml:true,alternatingRowStyle:false};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var table = new google.visualization.Table(document.getElementById(\'");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t");
    _builder.append("\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("table.draw(data,options);      ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}).fail(function( jqxhr, textStatus, error ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var err = textStatus + \", \" + error;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("console.log( \"Request Failed: \" + err );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});//END getJSON     \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePy(final TableChart e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("Pie Chart Code generated - this code es generated based on DSL.");
    _builder.newLine();
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.append("from urllib.request import urlopen");
    _builder.newLine();
    _builder.append("import matplotlib.pyplot as plt");
    _builder.newLine();
    _builder.append("import pandas as pd");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("URL=\"");
    String _value = e.getTuple().getUrl().getValue();
    _builder.append(_value);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("response=json.load(urlopen(URL))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pd.DataFrame(response,columns=[");
    {
      EList<Datatype> _values = e.getTuple().getValues();
      for(final Datatype v : _values) {
        _builder.append("\'");
        String _name = v.getName();
        _builder.append(_name);
        _builder.append("\',");
      }
    }
    _builder.append("])");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileHTML(final DashBoard e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"js/properties.js\"></script>\t");
    _builder.newLine();
    {
      EList<Chart> _charts = e.getCharts();
      for(final Chart chart : _charts) {
        _builder.append("\t");
        _builder.append("<script src=\"js/");
        String _name = chart.getName();
        _builder.append(_name, "\t");
        _builder.append(".js\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<style type=\"text/css\">");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("/*General Labels*/");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("body{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 0px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background: #CDCDCD;");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("/*This code block delete default style in google table chart*/");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("table.google-visualization-table-table .google-visualization-table-th, table.google-visualization-table-table .google-visualization-table-td {");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("color: black;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-image: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-repeat: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-position: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("-webkit-border-radius: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("-moz-border-radius: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("border-radius: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("border-style: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("border-width: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("border-color: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-color: initial;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}    \t");
    _builder.newLine();
    _builder.append("  \t\t ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/*CLASS*/   \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".headerTable{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-color: #1D7B9D;\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("color: white;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".rowTable{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-color: #C5DEE6;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".rowTable:hover{");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("background-color: #66AEC9;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g1x1 {");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("min-width: 250px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 30%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 260px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g1x2 {");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 62.5%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 260px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g1x3 {");
    _builder.newLine();
    _builder.append("  \t \t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 95%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 260px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g2x1 {");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 30%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 550px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g2x2 {");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 62.5%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 550px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".g3x3 {");
    _builder.newLine();
    _builder.append("  \t \t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 95%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 550px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("float: left;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t1x1{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 200px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 28%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t1x2{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 200px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 60%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t1x3{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 200px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 90%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t2x1{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 520px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 28%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t2x2{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 520px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 60%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".t3x3{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("padding: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 520px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 95%;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append(".title{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("margin: 5px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("color: rgb(32, 33, 33);");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t\t    \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("#title{");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("height: 50px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("line-height: 50px; ");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("font-size: 28px;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("vertical-align: middle;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("color: white;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("font-family: Roboto, serif;");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background: #154061\t    \t\t    \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</style>  ");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<div id=\"Title\">");
    {
      int _size = IterableExtensions.size(Iterables.<Title>filter(e.getFeatures(), Title.class));
      boolean _tripleNotEquals = (_size != 0);
      if (_tripleNotEquals) {
        String _value = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(e.getFeatures(), Title.class), Title.class))[0].getValue();
        _builder.append(_value);
      }
    }
    _builder.append("</div>");
    _builder.newLineIfNotEmpty();
    _builder.append("<div style=\"margin-left:3%;\">");
    _builder.newLine();
    {
      EList<Chart> _charts_1 = e.getCharts();
      for(final Chart chart_1 : _charts_1) {
        {
          if ((chart_1 instanceof PieChart)) {
            _builder.append("\t");
            _builder.append("<div class=\"g");
            {
              int _size_1 = IterableExtensions.size(Iterables.<CellSize>filter(((PieChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_1 = (_size_1 != 0);
              if (_tripleNotEquals_1) {
                String _value_1 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((PieChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_1, "\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("<div class=\"title\">");
            {
              int _size_2 = IterableExtensions.size(Iterables.<Title>filter(((PieChart)chart_1).getFeatures(), Title.class));
              boolean _tripleNotEquals_2 = (_size_2 != 0);
              if (_tripleNotEquals_2) {
                String _value_2 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(((PieChart)chart_1).getFeatures(), Title.class), Title.class))[0].getValue();
                _builder.append(_value_2, "\t\t\t");
              }
            }
            _builder.append("</div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("<div id=\"");
            String _name_1 = ((PieChart)chart_1).getName();
            _builder.append(_name_1, "\t\t\t");
            _builder.append("\" style=\"width: 100%; height: 90%;\"></div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        {
          if ((chart_1 instanceof BarChart)) {
            _builder.append("\t");
            _builder.append("<div class=\"g");
            {
              int _size_3 = IterableExtensions.size(Iterables.<CellSize>filter(((BarChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_3 = (_size_3 != 0);
              if (_tripleNotEquals_3) {
                String _value_3 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((BarChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_3, "\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div class=\"title\">");
            {
              int _size_4 = IterableExtensions.size(Iterables.<Title>filter(((BarChart)chart_1).getFeatures(), Title.class));
              boolean _tripleNotEquals_4 = (_size_4 != 0);
              if (_tripleNotEquals_4) {
                String _value_4 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(((BarChart)chart_1).getFeatures(), Title.class), Title.class))[0].getValue();
                _builder.append(_value_4, "\t\t");
              }
            }
            _builder.append("</div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div id=\"");
            String _name_2 = ((BarChart)chart_1).getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\" style=\"width: 100%; height: 90%;\"></div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        {
          if ((chart_1 instanceof LineChart)) {
            _builder.append("\t");
            _builder.append("<div class=\"g");
            {
              int _size_5 = IterableExtensions.size(Iterables.<CellSize>filter(((LineChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_5 = (_size_5 != 0);
              if (_tripleNotEquals_5) {
                String _value_5 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((LineChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_5, "\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div class=\"title\">");
            {
              int _size_6 = IterableExtensions.size(Iterables.<Title>filter(((LineChart)chart_1).getFeatures(), Title.class));
              boolean _tripleNotEquals_6 = (_size_6 != 0);
              if (_tripleNotEquals_6) {
                String _value_6 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(((LineChart)chart_1).getFeatures(), Title.class), Title.class))[0].getValue();
                _builder.append(_value_6, "\t\t");
              }
            }
            _builder.append("</div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div id=\"");
            String _name_3 = ((LineChart)chart_1).getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("\" style=\"width: 100%; height: 90%;\"></div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        {
          if ((chart_1 instanceof MapChart)) {
            _builder.append("\t");
            _builder.append("<div class=\"g");
            {
              int _size_7 = IterableExtensions.size(Iterables.<CellSize>filter(((MapChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_7 = (_size_7 != 0);
              if (_tripleNotEquals_7) {
                String _value_7 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((MapChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_7, "\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div class=\"title\">");
            {
              int _size_8 = IterableExtensions.size(Iterables.<Title>filter(((MapChart)chart_1).getFeatures(), Title.class));
              boolean _tripleNotEquals_8 = (_size_8 != 0);
              if (_tripleNotEquals_8) {
                String _value_8 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(((MapChart)chart_1).getFeatures(), Title.class), Title.class))[0].getValue();
                _builder.append(_value_8, "\t\t");
              }
            }
            _builder.append("</div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div id=\"");
            String _name_4 = ((MapChart)chart_1).getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\" class=\"t");
            {
              int _size_9 = IterableExtensions.size(Iterables.<CellSize>filter(((MapChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_9 = (_size_9 != 0);
              if (_tripleNotEquals_9) {
                String _value_9 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((MapChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_9, "\t\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\"></div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        {
          if ((chart_1 instanceof TableChart)) {
            _builder.append("\t");
            _builder.append("<div class=\"g");
            {
              int _size_10 = IterableExtensions.size(Iterables.<CellSize>filter(((TableChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_10 = (_size_10 != 0);
              if (_tripleNotEquals_10) {
                String _value_10 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((TableChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_10, "\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div class=\"title\">");
            {
              int _size_11 = IterableExtensions.size(Iterables.<Title>filter(((TableChart)chart_1).getFeatures(), Title.class));
              boolean _tripleNotEquals_11 = (_size_11 != 0);
              if (_tripleNotEquals_11) {
                String _value_11 = ((Title[])Conversions.unwrapArray(Iterables.<Title>filter(((TableChart)chart_1).getFeatures(), Title.class), Title.class))[0].getValue();
                _builder.append(_value_11, "\t\t");
              }
            }
            _builder.append("</div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<div id=\"");
            String _name_5 = ((TableChart)chart_1).getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\" class=\"t");
            {
              int _size_12 = IterableExtensions.size(Iterables.<CellSize>filter(((TableChart)chart_1).getFeatures(), CellSize.class));
              boolean _tripleNotEquals_12 = (_size_12 != 0);
              if (_tripleNotEquals_12) {
                String _value_12 = ((CellSize[])Conversions.unwrapArray(Iterables.<CellSize>filter(((TableChart)chart_1).getFeatures(), CellSize.class), CellSize.class))[0].getValue();
                _builder.append(_value_12, "\t\t");
              } else {
                _builder.append("1x1");
              }
            }
            _builder.append("\"></div>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("</div>   ");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getURL(final URL t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _value = t.getValue();
    _builder.append(_value);
    _builder.append("\"");
    return _builder;
  }
}
